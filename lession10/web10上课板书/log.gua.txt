16:57:47 完整请求
16:57:47 请求结束
16:57:47 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:57:47 path and query /api/comment/add {} {"weibo_id":"3","content":"按时发货就卡死的复活节"}
16:57:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:57:47 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
16:57:47 接收到的前端的数据 {'weibo_id': '3', 'content': '按时发货就卡死的复活节'}
16:57:47 创建的评论对象 < Comment
id: (22)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>

16:57:47 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 22,
  "content": "按时发货就卡死的复活节",
  "weibo_id": 3
})
16:57:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 22,
  "content": "按时发货就卡死的复活节",
  "weibo_id": 3
}
16:57:48 完整请求
16:57:48 请求结束
16:57:48 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:57:48 path and query /api/comment/add {} {"weibo_id":"3","content":"按时发货就卡死的复活节"}
16:57:48 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:57:48 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
16:57:48 接收到的前端的数据 {'weibo_id': '3', 'content': '按时发货就卡死的复活节'}
16:57:48 创建的评论对象 < Comment
id: (23)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>

16:57:48 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 23,
  "content": "按时发货就卡死的复活节",
  "weibo_id": 3
})
16:57:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 23,
  "content": "按时发货就卡死的复活节",
  "weibo_id": 3
}
16:59:10 完整请求
16:59:10 请求结束
16:59:10 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:10 path and query /weibo/index {} 
16:59:10 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:59:10 完整请求
16:59:10 请求结束
16:59:10 完整请求
16:59:10 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:10 请求结束
16:59:10 path and query /static {'file': 'gua.js'} 
16:59:10 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:10 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:10 path and query /static {'file': 'weibo.js'} 
16:59:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

16:59:10 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:59:10 完整请求
16:59:10 请求结束
16:59:10 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:10 path and query /api/weibo/all {} 
16:59:10 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 debug weibo init form = ({}) content =() 
16:59:10 kwargs,  {'weibo_id': 1} <class 'dict'>
16:59:10 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
16:59:10 kwargs,  {'weibo_id': 1} <class 'dict'>
16:59:10 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
16:59:10 kwargs,  {'weibo_id': 2} <class 'dict'>
16:59:10 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
16:59:10 kwargs,  {'weibo_id': 2} <class 'dict'>
16:59:10 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
16:59:10 kwargs,  {'weibo_id': 3} <class 'dict'>
16:59:10 debug Weibo comment([< Comment
id: (6)
content: (123)
weibo_id: (3)
user_id: (1) 
>
, < Comment
id: (9)
content: (我就睡觉)
weibo_id: (3) 
>
, < Comment
id: (11)
content: (奥术大师大声道)
weibo_id: (3) 
>
, < Comment
id: (12)
content: (啊啊所大所多)
weibo_id: (3) 
>
, < Comment
id: (14)
content: (睡大觉卡三等奖卡数据库)
weibo_id: (3) 
>
, < Comment
id: (19)
content: (就是爱音乐)
weibo_id: (3) 
>
, < Comment
id: (20)
content: (水电费健康拉数据库两)
weibo_id: (3) 
>
, < Comment
id: (21)
content: (我爱实打实)
weibo_id: (3) 
>
, < Comment
id: (22)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
, < Comment
id: (23)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
])
16:59:10 kwargs,  {'weibo_id': 3} <class 'dict'>
16:59:10 debug weibo json({'id': 3, 'title': '', 'content': 'hahaha', 'user_id': 1, 'comments': [{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]})comments([{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]) type=(<class 'list'>) 
16:59:10 kwargs,  {'weibo_id': 8} <class 'dict'>
16:59:10 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
])
16:59:10 kwargs,  {'weibo_id': 8} <class 'dict'>
16:59:10 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}]) type=(<class 'list'>) 
16:59:10 kwargs,  {'weibo_id': 9} <class 'dict'>
16:59:10 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
])
16:59:10 kwargs,  {'weibo_id': 9} <class 'dict'>
16:59:10 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}]) type=(<class 'list'>) 
16:59:10 kwargs,  {'weibo_id': 11} <class 'dict'>
16:59:10 debug Weibo comment([])
16:59:10 kwargs,  {'weibo_id': 11} <class 'dict'>
16:59:10 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
16:59:10 kwargs,  {'weibo_id': 17} <class 'dict'>
16:59:10 debug Weibo comment([])
16:59:10 kwargs,  {'weibo_id': 17} <class 'dict'>
16:59:10 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
16:59:10 kwargs,  {'weibo_id': 18} <class 'dict'>
16:59:10 debug Weibo comment([])
16:59:10 kwargs,  {'weibo_id': 18} <class 'dict'>
16:59:10 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
16:59:11 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
16:59:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
16:59:19 完整请求
16:59:19 请求结束
16:59:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:19 path and query /api/comment/add {} 
16:59:19 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:19 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
16:59:19 完整请求
16:59:19 请求结束
16:59:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:19 path and query /api/comment/add {} 
16:59:19 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:19 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
16:59:42 完整请求
16:59:42 请求结束
16:59:42 请求结束
16:59:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:42 path and query /weibo/index {} 
16:59:42 path and query /api/comment/add {} 
16:59:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:59:42 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
16:59:42 完整请求
16:59:42 请求结束
16:59:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:42 path and query /api/comment/add {} 
16:59:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:42 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
16:59:42 完整请求
16:59:42 请求结束
16:59:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:42 path and query /static {'file': 'gua.js'} 
16:59:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

16:59:42 完整请求
16:59:42 请求结束
16:59:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:42 path and query /static {'file': 'weibo.js'} 
16:59:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:59:43 完整请求
16:59:43 请求结束
16:59:43 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:43 path and query /api/weibo/all {} 
16:59:43 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 debug weibo init form = ({}) content =() 
16:59:43 kwargs,  {'weibo_id': 1} <class 'dict'>
16:59:43 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
16:59:43 kwargs,  {'weibo_id': 1} <class 'dict'>
16:59:43 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
16:59:43 kwargs,  {'weibo_id': 2} <class 'dict'>
16:59:43 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
16:59:43 kwargs,  {'weibo_id': 2} <class 'dict'>
16:59:43 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
16:59:43 kwargs,  {'weibo_id': 3} <class 'dict'>
16:59:43 debug Weibo comment([< Comment
id: (6)
content: (123)
weibo_id: (3)
user_id: (1) 
>
, < Comment
id: (9)
content: (我就睡觉)
weibo_id: (3) 
>
, < Comment
id: (11)
content: (奥术大师大声道)
weibo_id: (3) 
>
, < Comment
id: (12)
content: (啊啊所大所多)
weibo_id: (3) 
>
, < Comment
id: (14)
content: (睡大觉卡三等奖卡数据库)
weibo_id: (3) 
>
, < Comment
id: (19)
content: (就是爱音乐)
weibo_id: (3) 
>
, < Comment
id: (20)
content: (水电费健康拉数据库两)
weibo_id: (3) 
>
, < Comment
id: (21)
content: (我爱实打实)
weibo_id: (3) 
>
, < Comment
id: (22)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
, < Comment
id: (23)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
])
16:59:43 kwargs,  {'weibo_id': 3} <class 'dict'>
16:59:43 debug weibo json({'id': 3, 'title': '', 'content': 'hahaha', 'user_id': 1, 'comments': [{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]})comments([{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]) type=(<class 'list'>) 
16:59:43 kwargs,  {'weibo_id': 8} <class 'dict'>
16:59:43 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
])
16:59:43 kwargs,  {'weibo_id': 8} <class 'dict'>
16:59:43 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}]) type=(<class 'list'>) 
16:59:43 kwargs,  {'weibo_id': 9} <class 'dict'>
16:59:43 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
])
16:59:43 kwargs,  {'weibo_id': 9} <class 'dict'>
16:59:43 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}]) type=(<class 'list'>) 
16:59:43 kwargs,  {'weibo_id': 11} <class 'dict'>
16:59:43 debug Weibo comment([])
16:59:43 kwargs,  {'weibo_id': 11} <class 'dict'>
16:59:43 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
16:59:43 kwargs,  {'weibo_id': 17} <class 'dict'>
16:59:43 debug Weibo comment([])
16:59:43 kwargs,  {'weibo_id': 17} <class 'dict'>
16:59:43 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
16:59:43 kwargs,  {'weibo_id': 18} <class 'dict'>
16:59:43 debug Weibo comment([])
16:59:43 kwargs,  {'weibo_id': 18} <class 'dict'>
16:59:43 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
16:59:43 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
16:59:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
16:59:54 完整请求
16:59:54 请求结束
16:59:54 完整请求
16:59:54 请求结束
16:59:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
16:59:54 path and query /api/comment/add {} {"weibo_id":"9","content":"阿萨德复活节"}
16:59:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
16:59:54 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
16:59:54 接收到的前端的数据 {'weibo_id': '9', 'content': '阿萨德复活节'}
16:59:54 创建的评论对象 < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>

16:59:54 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 24,
  "content": "阿萨德复活节",
  "weibo_id": 9
})
16:59:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 24,
  "content": "阿萨德复活节",
  "weibo_id": 9
}
17:00:06 完整请求
17:00:06 请求结束
17:00:49 完整请求
17:00:49 请求结束
17:00:49 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:49 path and query /weibo/index {} 
17:00:49 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:00:49 完整请求
17:00:49 请求结束
17:00:49 完整请求
17:00:49 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:49 请求结束
17:00:49 path and query /static {'file': 'gua.js'} 
-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:49 path and query /static {'file': 'weibo.js'} 
tatic at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:49 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:49 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:00:49 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:00:49 完整请求
17:00:49 请求结束
17:00:49 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:49 path and query /api/weibo/all {} 
17:00:49 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 debug weibo init form = ({}) content =() 
17:00:49 kwargs,  {'weibo_id': 1} <class 'dict'>
17:00:49 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:00:49 kwargs,  {'weibo_id': 1} <class 'dict'>
17:00:49 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:00:49 kwargs,  {'weibo_id': 2} <class 'dict'>
17:00:49 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:00:49 kwargs,  {'weibo_id': 2} <class 'dict'>
17:00:49 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:00:49 kwargs,  {'weibo_id': 3} <class 'dict'>
17:00:49 debug Weibo comment([< Comment
id: (6)
content: (123)
weibo_id: (3)
user_id: (1) 
>
, < Comment
id: (9)
content: (我就睡觉)
weibo_id: (3) 
>
, < Comment
id: (11)
content: (奥术大师大声道)
weibo_id: (3) 
>
, < Comment
id: (12)
content: (啊啊所大所多)
weibo_id: (3) 
>
, < Comment
id: (14)
content: (睡大觉卡三等奖卡数据库)
weibo_id: (3) 
>
, < Comment
id: (19)
content: (就是爱音乐)
weibo_id: (3) 
>
, < Comment
id: (20)
content: (水电费健康拉数据库两)
weibo_id: (3) 
>
, < Comment
id: (21)
content: (我爱实打实)
weibo_id: (3) 
>
, < Comment
id: (22)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
, < Comment
id: (23)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
])
17:00:49 kwargs,  {'weibo_id': 3} <class 'dict'>
17:00:49 debug weibo json({'id': 3, 'title': '', 'content': 'hahaha', 'user_id': 1, 'comments': [{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]})comments([{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]) type=(<class 'list'>) 
17:00:49 kwargs,  {'weibo_id': 8} <class 'dict'>
17:00:49 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
])
17:00:49 kwargs,  {'weibo_id': 8} <class 'dict'>
17:00:49 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}]) type=(<class 'list'>) 
17:00:49 kwargs,  {'weibo_id': 9} <class 'dict'>
17:00:49 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:00:49 kwargs,  {'weibo_id': 9} <class 'dict'>
17:00:49 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:00:49 kwargs,  {'weibo_id': 11} <class 'dict'>
17:00:49 debug Weibo comment([])
17:00:49 kwargs,  {'weibo_id': 11} <class 'dict'>
17:00:49 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:00:49 kwargs,  {'weibo_id': 17} <class 'dict'>
17:00:49 debug Weibo comment([])
17:00:49 kwargs,  {'weibo_id': 17} <class 'dict'>
17:00:49 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:00:49 kwargs,  {'weibo_id': 18} <class 'dict'>
17:00:49 debug Weibo comment([])
17:00:49 kwargs,  {'weibo_id': 18} <class 'dict'>
17:00:49 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:00:49 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:00:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:00:54 完整请求
17:00:54 请求结束
17:00:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:54 path and query /api/comment/add {} 
17:00:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:54 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
17:00:54 完整请求
17:00:54 请求结束
17:00:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:54 path and query /api/comment/add {} 
17:00:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:54 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
17:00:57 完整请求
17:00:57 请求结束
17:00:57 请求结束
17:00:57 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:57 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:57 path and query /api/comment/add {} 
17:00:57 path and query /weibo/index {} 
17:00:57 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:57 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:57 路由到了添加评论(<__main__.Request object at 0x03EAC550>)
17:00:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:00:57 完整请求
17:00:57 请求结束
17:00:57 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:57 path and query /api/comment/add {} 
17:00:57 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:57 路由到了添加评论(<__main__.Request object at 0x03EB8CB0>)
17:00:57 完整请求
17:00:57 请求结束
17:00:57 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:57 path and query /static {'file': 'gua.js'} 
17:00:57 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:00:57 完整请求
17:00:57 请求结束
17:00:57 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:57 path and query /static {'file': 'weibo.js'} 
17:00:57 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:00:57 完整请求
17:00:57 请求结束
17:00:57 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:00:57 path and query /api/weibo/all {} 
17:00:57 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 debug weibo init form = ({}) content =() 
17:00:57 kwargs,  {'weibo_id': 1} <class 'dict'>
17:00:57 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:00:57 kwargs,  {'weibo_id': 1} <class 'dict'>
17:00:57 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:00:57 kwargs,  {'weibo_id': 2} <class 'dict'>
17:00:57 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:00:57 kwargs,  {'weibo_id': 2} <class 'dict'>
17:00:57 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:00:57 kwargs,  {'weibo_id': 3} <class 'dict'>
17:00:57 debug Weibo comment([< Comment
id: (6)
content: (123)
weibo_id: (3)
user_id: (1) 
>
, < Comment
id: (9)
content: (我就睡觉)
weibo_id: (3) 
>
, < Comment
id: (11)
content: (奥术大师大声道)
weibo_id: (3) 
>
, < Comment
id: (12)
content: (啊啊所大所多)
weibo_id: (3) 
>
, < Comment
id: (14)
content: (睡大觉卡三等奖卡数据库)
weibo_id: (3) 
>
, < Comment
id: (19)
content: (就是爱音乐)
weibo_id: (3) 
>
, < Comment
id: (20)
content: (水电费健康拉数据库两)
weibo_id: (3) 
>
, < Comment
id: (21)
content: (我爱实打实)
weibo_id: (3) 
>
, < Comment
id: (22)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
, < Comment
id: (23)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
])
17:00:57 kwargs,  {'weibo_id': 3} <class 'dict'>
17:00:57 debug weibo json({'id': 3, 'title': '', 'content': 'hahaha', 'user_id': 1, 'comments': [{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]})comments([{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]) type=(<class 'list'>) 
17:00:57 kwargs,  {'weibo_id': 8} <class 'dict'>
17:00:57 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
])
17:00:57 kwargs,  {'weibo_id': 8} <class 'dict'>
17:00:57 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}]) type=(<class 'list'>) 
17:00:57 kwargs,  {'weibo_id': 9} <class 'dict'>
17:00:57 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:00:57 kwargs,  {'weibo_id': 9} <class 'dict'>
17:00:57 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:00:57 kwargs,  {'weibo_id': 11} <class 'dict'>
17:00:57 debug Weibo comment([])
17:00:57 kwargs,  {'weibo_id': 11} <class 'dict'>
17:00:57 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:00:57 kwargs,  {'weibo_id': 17} <class 'dict'>
17:00:57 debug Weibo comment([])
17:00:57 kwargs,  {'weibo_id': 17} <class 'dict'>
17:00:57 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:00:57 kwargs,  {'weibo_id': 18} <class 'dict'>
17:00:57 debug Weibo comment([])
17:00:57 kwargs,  {'weibo_id': 18} <class 'dict'>
17:00:57 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:00:57 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:00:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:01:06 完整请求
17:01:06 请求结束
17:01:06 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:01:06 path and query /api/comment/add {} 
17:01:06 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:01:06 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
17:02:35 完整请求
17:02:35 完整请求
17:02:35 请求结束
17:02:35 请求结束
17:02:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:35 path and query /weibo/index {} 
17:02:35 path and query /api/comment/add {} 
17:02:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:35 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
17:02:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:02:35 完整请求
17:02:35 请求结束
17:02:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:35 path and query /api/comment/add {} 
17:02:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:35 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
17:02:35 完整请求
17:02:35 请求结束
17:02:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:35 path and query /static {'file': 'gua.js'} 
17:02:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:02:36 完整请求
17:02:36 请求结束
17:02:36 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:36 path and query /static {'file': 'weibo.js'} 
17:02:36 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:02:36 完整请求
17:02:36 请求结束
17:02:36 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:36 path and query /api/weibo/all {} 
17:02:36 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 debug weibo init form = ({}) content =() 
17:02:36 kwargs,  {'weibo_id': 1} <class 'dict'>
17:02:36 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:02:36 kwargs,  {'weibo_id': 1} <class 'dict'>
17:02:36 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:02:36 kwargs,  {'weibo_id': 2} <class 'dict'>
17:02:36 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:02:36 kwargs,  {'weibo_id': 2} <class 'dict'>
17:02:36 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:02:36 kwargs,  {'weibo_id': 3} <class 'dict'>
17:02:36 debug Weibo comment([< Comment
id: (6)
content: (123)
weibo_id: (3)
user_id: (1) 
>
, < Comment
id: (9)
content: (我就睡觉)
weibo_id: (3) 
>
, < Comment
id: (11)
content: (奥术大师大声道)
weibo_id: (3) 
>
, < Comment
id: (12)
content: (啊啊所大所多)
weibo_id: (3) 
>
, < Comment
id: (14)
content: (睡大觉卡三等奖卡数据库)
weibo_id: (3) 
>
, < Comment
id: (19)
content: (就是爱音乐)
weibo_id: (3) 
>
, < Comment
id: (20)
content: (水电费健康拉数据库两)
weibo_id: (3) 
>
, < Comment
id: (21)
content: (我爱实打实)
weibo_id: (3) 
>
, < Comment
id: (22)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
, < Comment
id: (23)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
])
17:02:36 kwargs,  {'weibo_id': 3} <class 'dict'>
17:02:36 debug weibo json({'id': 3, 'title': '', 'content': 'hahaha', 'user_id': 1, 'comments': [{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]})comments([{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]) type=(<class 'list'>) 
17:02:36 kwargs,  {'weibo_id': 8} <class 'dict'>
17:02:36 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
])
17:02:36 kwargs,  {'weibo_id': 8} <class 'dict'>
17:02:36 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}]) type=(<class 'list'>) 
17:02:36 kwargs,  {'weibo_id': 9} <class 'dict'>
17:02:36 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:02:36 kwargs,  {'weibo_id': 9} <class 'dict'>
17:02:36 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:02:36 kwargs,  {'weibo_id': 11} <class 'dict'>
17:02:36 debug Weibo comment([])
17:02:36 kwargs,  {'weibo_id': 11} <class 'dict'>
17:02:36 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:02:36 kwargs,  {'weibo_id': 17} <class 'dict'>
17:02:36 debug Weibo comment([])
17:02:36 kwargs,  {'weibo_id': 17} <class 'dict'>
17:02:36 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:02:36 kwargs,  {'weibo_id': 18} <class 'dict'>
17:02:36 debug Weibo comment([])
17:02:36 kwargs,  {'weibo_id': 18} <class 'dict'>
17:02:36 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:02:36 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:02:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "title": "",
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "我就睡觉",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "奥术大师大声道",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "啊啊所大所多",
        "weibo_id": 3
      },
      {
        "id": 14,
        "content": "睡大觉卡三等奖卡数据库",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "就是爱音乐",
        "weibo_id": 3
      },
      {
        "id": 20,
        "content": "水电费健康拉数据库两",
        "weibo_id": 3
      },
      {
        "id": 21,
        "content": "我爱实打实",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "按时发货就卡死的复活节",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:02:40 完整请求
17:02:40 请求结束
17:02:40 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:40 path and query /api/weibo/delete {'id': '3'} 
17:02:40 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 debug weibo init form = ({}) content =() 
17:02:40 kwargs,  {'weibo_id': 3} <class 'dict'>
17:02:40 debug Weibo comment([< Comment
id: (6)
content: (123)
weibo_id: (3)
user_id: (1) 
>
, < Comment
id: (9)
content: (我就睡觉)
weibo_id: (3) 
>
, < Comment
id: (11)
content: (奥术大师大声道)
weibo_id: (3) 
>
, < Comment
id: (12)
content: (啊啊所大所多)
weibo_id: (3) 
>
, < Comment
id: (14)
content: (睡大觉卡三等奖卡数据库)
weibo_id: (3) 
>
, < Comment
id: (19)
content: (就是爱音乐)
weibo_id: (3) 
>
, < Comment
id: (20)
content: (水电费健康拉数据库两)
weibo_id: (3) 
>
, < Comment
id: (21)
content: (我爱实打实)
weibo_id: (3) 
>
, < Comment
id: (22)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
, < Comment
id: (23)
content: (按时发货就卡死的复活节)
weibo_id: (3) 
>
])
17:02:40 kwargs,  {'weibo_id': 3} <class 'dict'>
17:02:40 debug weibo json({'id': 3, 'title': '', 'content': 'hahaha', 'user_id': 1, 'comments': [{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]})comments([{'id': 6, 'content': '123', 'weibo_id': 3, 'user_id': 1}, {'id': 9, 'content': '我就睡觉', 'weibo_id': 3}, {'id': 11, 'content': '奥术大师大声道', 'weibo_id': 3}, {'id': 12, 'content': '啊啊所大所多', 'weibo_id': 3}, {'id': 14, 'content': '睡大觉卡三等奖卡数据库', 'weibo_id': 3}, {'id': 19, 'content': '就是爱音乐', 'weibo_id': 3}, {'id': 20, 'content': '水电费健康拉数据库两', 'weibo_id': 3}, {'id': 21, 'content': '我爱实打实', 'weibo_id': 3}, {'id': 22, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}, {'id': 23, 'content': '按时发货就卡死的复活节', 'weibo_id': 3}]) type=(<class 'list'>) 
17:02:40 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "",
  "content": "hahaha",
  "user_id": 1,
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    },
    {
      "id": 9,
      "content": "我就睡觉",
      "weibo_id": 3
    },
    {
      "id": 11,
      "content": "奥术大师大声道",
      "weibo_id": 3
    },
    {
      "id": 12,
      "content": "啊啊所大所多",
      "weibo_id": 3
    },
    {
      "id": 14,
      "content": "睡大觉卡三等奖卡数据库",
      "weibo_id": 3
    },
    {
      "id": 19,
      "content": "就是爱音乐",
      "weibo_id": 3
    },
    {
      "id": 20,
      "content": "水电费健康拉数据库两",
      "weibo_id": 3
    },
    {
      "id": 21,
      "content": "我爱实打实",
      "weibo_id": 3
    },
    {
      "id": 22,
      "content": "按时发货就卡死的复活节",
      "weibo_id": 3
    },
    {
      "id": 23,
      "content": "按时发货就卡死的复活节",
      "weibo_id": 3
    }
  ]
})
17:02:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "",
  "content": "hahaha",
  "user_id": 1,
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    },
    {
      "id": 9,
      "content": "我就睡觉",
      "weibo_id": 3
    },
    {
      "id": 11,
      "content": "奥术大师大声道",
      "weibo_id": 3
    },
    {
      "id": 12,
      "content": "啊啊所大所多",
      "weibo_id": 3
    },
    {
      "id": 14,
      "content": "睡大觉卡三等奖卡数据库",
      "weibo_id": 3
    },
    {
      "id": 19,
      "content": "就是爱音乐",
      "weibo_id": 3
    },
    {
      "id": 20,
      "content": "水电费健康拉数据库两",
      "weibo_id": 3
    },
    {
      "id": 21,
      "content": "我爱实打实",
      "weibo_id": 3
    },
    {
      "id": 22,
      "content": "按时发货就卡死的复活节",
      "weibo_id": 3
    },
    {
      "id": 23,
      "content": "按时发货就卡死的复活节",
      "weibo_id": 3
    }
  ]
}
17:02:45 完整请求
17:02:45 请求结束
17:02:45 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:02:45 path and query /api/comment/add {} {"weibo_id":"8","content":"按时发货后健身房"}
17:02:45 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:02:45 路由到了添加评论(<__main__.Request object at 0x0393A3D0>)
17:02:45 接收到的前端的数据 {'weibo_id': '8', 'content': '按时发货后健身房'}
17:02:45 创建的评论对象 < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>

17:02:45 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 25,
  "content": "按时发货后健身房",
  "weibo_id": 8
})
17:02:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 25,
  "content": "按时发货后健身房",
  "weibo_id": 8
}
17:05:03 完整请求
17:05:03 请求结束
17:05:04 完整请求
17:05:04 请求结束
17:05:04 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:04 path and query /weibo/index {} 
17:05:04 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:04 完整请求
17:05:04 请求结束
17:05:04 完整请求
17:05:04 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:04 请求结束
17:05:04 path and query /static {'file': 'gua.js'} 
17:05:04 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:04 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:04 path and query /static {'file': 'weibo.js'} 
17:05:04 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:04 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:05:04 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:04 完整请求
17:05:04 请求结束
17:05:04 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:04 path and query /api/weibo/all {} 
17:05:04 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:04 debug weibo init form = ({}) content =() 
17:05:04 debug weibo init form = ({}) content =() 
17:05:04 debug weibo init form = ({}) content =() 
17:05:04 debug weibo init form = ({}) content =() 
17:05:04 debug weibo init form = ({}) content =() 
17:05:04 debug weibo init form = ({}) content =() 
17:05:04 debug weibo init form = ({}) content =() 
17:05:04 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:04 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:05:04 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:04 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:05:04 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:04 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:05:04 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:04 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:05:04 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:04 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
])
17:05:04 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:04 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]) type=(<class 'list'>) 
17:05:04 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:04 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:05:04 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:04 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:05:04 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:04 debug Weibo comment([])
17:05:04 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:04 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:04 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:04 debug Weibo comment([])
17:05:04 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:04 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:04 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:04 debug Weibo comment([])
17:05:04 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:04 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:04 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:05:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:05:09 完整请求
17:05:09 请求结束
17:05:09 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:09 path and query /api/comment/add {} 
17:05:09 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:09 路由到了添加评论(<__main__.Request object at 0x03EB36B0>)
17:05:09 完整请求
17:05:10 请求结束
17:05:10 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:10 path and query /api/comment/add {} 
17:05:10 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:10 路由到了添加评论(<__main__.Request object at 0x03EB3F90>)
17:05:13 完整请求
17:05:13 完整请求
17:05:13 请求结束
17:05:13 请求结束
17:05:13 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:13 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:13 path and query /weibo/index {} 
17:05:13 path and query /api/comment/add {} 
17:05:13 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:13 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:13 路由到了添加评论(<__main__.Request object at 0x03EB3BD0>)
17:05:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:13 完整请求
17:05:13 请求结束
17:05:13 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:13 path and query /api/comment/add {} 
17:05:13 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:13 路由到了添加评论(<__main__.Request object at 0x03EB38D0>)
17:05:13 完整请求
17:05:13 请求结束
17:05:13 完整请求
17:05:13 请求结束
rm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:13 path and query /static {'file': 'gua.js'} 
17:05:13 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:13 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:13 path and query /static {'file': 'weibo.js'} 
17:05:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:05:13 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:13 完整请求
17:05:13 请求结束
17:05:13 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:13 path and query /api/weibo/all {} 
17:05:13 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:13 debug weibo init form = ({}) content =() 
17:05:13 debug weibo init form = ({}) content =() 
17:05:13 debug weibo init form = ({}) content =() 
17:05:13 debug weibo init form = ({}) content =() 
17:05:13 debug weibo init form = ({}) content =() 
17:05:13 debug weibo init form = ({}) content =() 
17:05:13 debug weibo init form = ({}) content =() 
17:05:13 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:13 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:05:13 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:13 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:05:13 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:13 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:05:13 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:13 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:05:13 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:13 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
])
17:05:13 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:13 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]) type=(<class 'list'>) 
17:05:13 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:13 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:05:13 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:13 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:05:13 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:13 debug Weibo comment([])
17:05:13 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:13 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:13 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:13 debug Weibo comment([])
17:05:13 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:13 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:13 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:13 debug Weibo comment([])
17:05:13 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:13 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:13 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:05:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:05:17 完整请求
17:05:17 请求结束
17:05:17 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:17 path and query /api/comment/add {} 
17:05:17 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:17 路由到了添加评论(<__main__.Request object at 0x03E97F10>)
17:05:19 完整请求
17:05:19 完整请求
17:05:19 请求结束
17:05:19 请求结束
17:05:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:19 path and query /api/comment/add {} 
17:05:19 path and query /weibo/index {} 
17:05:19 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:19 路由到了添加评论(<__main__.Request object at 0x03E97A90>)
17:05:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:19 完整请求
17:05:19 请求结束
17:05:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:19 path and query /api/comment/add {} 
17:05:19 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:19 路由到了添加评论(<__main__.Request object at 0x03E97E10>)
17:05:19 完整请求
17:05:19 请求结束
17:05:19 完整请求
17:05:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:19 请求结束
17:05:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:19 path and query /static {'file': 'weibo.js'} 
tatic at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:19 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:05:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:19 完整请求
17:05:19 请求结束
17:05:19 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:19 path and query /api/weibo/all {} 
17:05:19 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:19 debug weibo init form = ({}) content =() 
17:05:19 debug weibo init form = ({}) content =() 
17:05:19 debug weibo init form = ({}) content =() 
17:05:19 debug weibo init form = ({}) content =() 
17:05:19 debug weibo init form = ({}) content =() 
17:05:19 debug weibo init form = ({}) content =() 
17:05:19 debug weibo init form = ({}) content =() 
17:05:19 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:19 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:05:19 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:19 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:05:19 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:19 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:05:19 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:19 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:05:19 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:19 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
])
17:05:19 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:19 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]) type=(<class 'list'>) 
17:05:19 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:19 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:05:19 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:19 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:05:19 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:19 debug Weibo comment([])
17:05:19 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:19 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:19 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:19 debug Weibo comment([])
17:05:19 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:19 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:19 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:19 debug Weibo comment([])
17:05:19 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:19 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:19 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:05:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:05:22 完整请求
17:05:22 请求结束
17:05:22 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:22 path and query /api/comment/add {} 
17:05:22 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:22 路由到了添加评论(<__main__.Request object at 0x03E97AB0>)
17:05:24 完整请求
17:05:24 完整请求
17:05:24 请求结束
17:05:24 请求结束
17:05:24 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:24 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:24 path and query /api/comment/add {} 
17:05:24 path and query /weibo/index {} 
17:05:24 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:24 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:24 路由到了添加评论(<__main__.Request object at 0x03E97F50>)
17:05:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:24 完整请求
17:05:24 请求结束
17:05:24 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:24 path and query /api/comment/add {} 
17:05:24 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:24 路由到了添加评论(<__main__.Request object at 0x03E97FF0>)
17:05:24 完整请求
17:05:24 请求结束
17:05:24 请求结束
rm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:24 path and query /static {'file': 'gua.js'} 
-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:24 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:24 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:05:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:25 完整请求
17:05:25 请求结束
17:05:25 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:25 path and query /api/weibo/all {} 
17:05:25 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:25 debug weibo init form = ({}) content =() 
17:05:25 debug weibo init form = ({}) content =() 
17:05:25 debug weibo init form = ({}) content =() 
17:05:25 debug weibo init form = ({}) content =() 
17:05:25 debug weibo init form = ({}) content =() 
17:05:25 debug weibo init form = ({}) content =() 
17:05:25 debug weibo init form = ({}) content =() 
17:05:25 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:25 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:05:25 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:25 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:05:25 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:25 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:05:25 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:25 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:05:25 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:25 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
])
17:05:25 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:25 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]) type=(<class 'list'>) 
17:05:25 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:25 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:05:25 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:25 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:05:25 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:25 debug Weibo comment([])
17:05:25 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:25 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:25 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:25 debug Weibo comment([])
17:05:25 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:25 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:25 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:25 debug Weibo comment([])
17:05:25 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:25 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:25 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:05:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:05:27 完整请求
17:05:27 请求结束
17:05:27 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:27 path and query /api/comment/add {} 
17:05:27 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:27 路由到了添加评论(<__main__.Request object at 0x03E97DF0>)
17:05:30 完整请求
17:05:30 完整请求
17:05:30 请求结束
17:05:30 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:30 请求结束
17:05:30 path and query /api/comment/add {} 
e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:30 path and query /weibo/index {} 
17:05:30 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:30 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:30 路由到了添加评论(<__main__.Request object at 0x03E97DF0>)
17:05:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:30 完整请求
17:05:30 请求结束
17:05:30 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:30 path and query /api/comment/add {} 
17:05:30 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:30 路由到了添加评论(<__main__.Request object at 0x03E97E10>)
17:05:30 完整请求
17:05:30 请求结束
17:05:30 完整请求
17:05:30 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:30 请求结束
17:05:30 path and query /static {'file': 'gua.js'} 
17:05:30 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:30 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:30 path and query /static {'file': 'weibo.js'} 
17:05:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:05:30 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:31 完整请求
17:05:31 请求结束
17:05:31 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:31 path and query /api/weibo/all {} 
17:05:31 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:31 debug weibo init form = ({}) content =() 
17:05:31 debug weibo init form = ({}) content =() 
17:05:31 debug weibo init form = ({}) content =() 
17:05:31 debug weibo init form = ({}) content =() 
17:05:31 debug weibo init form = ({}) content =() 
17:05:31 debug weibo init form = ({}) content =() 
17:05:31 debug weibo init form = ({}) content =() 
17:05:31 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:31 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:05:31 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:31 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:05:31 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:31 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:05:31 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:31 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:05:31 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:31 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
])
17:05:31 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:31 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]) type=(<class 'list'>) 
17:05:31 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:31 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:05:31 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:31 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:05:31 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:31 debug Weibo comment([])
17:05:31 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:31 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:31 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:31 debug Weibo comment([])
17:05:31 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:31 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:31 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:31 debug Weibo comment([])
17:05:31 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:31 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:31 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:05:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:05:33 完整请求
17:05:33 请求结束
17:05:33 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:33 path and query /api/comment/add {} 
17:05:33 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:33 路由到了添加评论(<__main__.Request object at 0x03E97CD0>)
17:05:35 完整请求
17:05:35 请求结束
17:05:35 完整请求
17:05:35 请求结束
17:05:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:35 path and query /api/comment/add {} 
17:05:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:35 path and query /weibo/index {} 
17:05:35 路由到了添加评论(<__main__.Request object at 0x03E97F50>)
17:05:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:35 完整请求
17:05:35 请求结束
17:05:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:35 path and query /api/comment/add {} 
17:05:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:35 路由到了添加评论(<__main__.Request object at 0x03E97ED0>)
17:05:35 完整请求
17:05:35 请求结束
17:05:35 完整请求
17:05:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:35 请求结束
17:05:35 path and query /static {'file': 'gua.js'} 
17:05:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:35 path and query /static {'file': 'weibo.js'} 
17:05:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:05:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:35 完整请求
17:05:35 请求结束
17:05:35 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:35 path and query /api/weibo/all {} 
17:05:35 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:35 debug weibo init form = ({}) content =() 
17:05:35 debug weibo init form = ({}) content =() 
17:05:35 debug weibo init form = ({}) content =() 
17:05:35 debug weibo init form = ({}) content =() 
17:05:35 debug weibo init form = ({}) content =() 
17:05:35 debug weibo init form = ({}) content =() 
17:05:35 debug weibo init form = ({}) content =() 
17:05:35 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:35 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:05:35 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:35 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:05:35 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:35 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:05:35 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:35 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:05:35 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:35 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
])
17:05:35 kwargs,  {'weibo_id': 8} <class 'dict'>
17:05:35 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]) type=(<class 'list'>) 
17:05:35 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:35 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:05:35 kwargs,  {'weibo_id': 9} <class 'dict'>
17:05:35 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:05:35 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:35 debug Weibo comment([])
17:05:35 kwargs,  {'weibo_id': 11} <class 'dict'>
17:05:35 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:35 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:35 debug Weibo comment([])
17:05:35 kwargs,  {'weibo_id': 17} <class 'dict'>
17:05:35 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:35 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:35 debug Weibo comment([])
17:05:35 kwargs,  {'weibo_id': 18} <class 'dict'>
17:05:35 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:05:35 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:05:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:05:37 完整请求
17:05:37 请求结束
17:05:37 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:05:37 path and query /api/comment/add {} 
17:05:37 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:05:37 路由到了添加评论(<__main__.Request object at 0x03E97FD0>)
17:06:16 完整请求
17:06:16 请求结束
17:06:16 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:06:16 path and query /weibo/index {} 
17:06:16 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:06:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:06:16 完整请求
17:06:16 完整请求
17:06:16 请求结束
17:06:16 请求结束
17:06:16 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:06:16 path and query /static {'file': 'gua.js'} 
17:06:16 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:06:16 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:06:16 path and query /static {'file': 'weibo.js'} 
17:06:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:06:16 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:06:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                var titleSpan = weiboCell.querySelector('.comment-list')
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:06:16 完整请求
17:06:16 请求结束
17:06:16 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
17:06:16 path and query /api/comment/add {} 
17:06:16 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:06:16 路由到了添加评论(<__main__.Request object at 0x03E97FD0>)
17:06:16 完整请求
17:06:16 请求结束
17:06:16 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:06:16 path and query /api/weibo/all {} 
17:06:17 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:06:17 debug weibo init form = ({}) content =() 
17:06:17 debug weibo init form = ({}) content =() 
17:06:17 debug weibo init form = ({}) content =() 
17:06:17 debug weibo init form = ({}) content =() 
17:06:17 debug weibo init form = ({}) content =() 
17:06:17 debug weibo init form = ({}) content =() 
17:06:17 debug weibo init form = ({}) content =() 
17:06:17 kwargs,  {'weibo_id': 1} <class 'dict'>
17:06:17 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:06:17 kwargs,  {'weibo_id': 1} <class 'dict'>
17:06:17 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:06:17 kwargs,  {'weibo_id': 2} <class 'dict'>
17:06:17 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:06:17 kwargs,  {'weibo_id': 2} <class 'dict'>
17:06:17 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:06:17 kwargs,  {'weibo_id': 8} <class 'dict'>
17:06:17 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
])
17:06:17 kwargs,  {'weibo_id': 8} <class 'dict'>
17:06:17 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}]) type=(<class 'list'>) 
17:06:17 kwargs,  {'weibo_id': 9} <class 'dict'>
17:06:17 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:06:17 kwargs,  {'weibo_id': 9} <class 'dict'>
17:06:17 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:06:17 kwargs,  {'weibo_id': 11} <class 'dict'>
17:06:17 debug Weibo comment([])
17:06:17 kwargs,  {'weibo_id': 11} <class 'dict'>
17:06:17 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:06:17 kwargs,  {'weibo_id': 17} <class 'dict'>
17:06:17 debug Weibo comment([])
17:06:17 kwargs,  {'weibo_id': 17} <class 'dict'>
17:06:17 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:06:17 kwargs,  {'weibo_id': 18} <class 'dict'>
17:06:17 debug Weibo comment([])
17:06:17 kwargs,  {'weibo_id': 18} <class 'dict'>
17:06:17 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:06:17 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:06:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:06:17 完整请求
17:06:17 请求结束
17:06:17 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:06:17 path and query /favicon.ico {} 
17:06:17 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:06:17 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:06:23 完整请求
17:06:23 完整请求
17:06:23 请求结束
17:06:23 请求结束
17:06:56 完整请求
17:06:56 请求结束
17:06:56 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:06:56 path and query /api/comment/add {} {"weibo_id":"8","content":"山东黄金卡视角卡迪夫"}
17:06:56 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:06:56 路由到了添加评论(<__main__.Request object at 0x03E97FD0>)
17:06:56 接收到的前端的数据 {'weibo_id': '8', 'content': '山东黄金卡视角卡迪夫'}
17:06:56 创建的评论对象 < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>

17:06:56 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 26,
  "content": "山东黄金卡视角卡迪夫",
  "weibo_id": 8
})
17:06:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 26,
  "content": "山东黄金卡视角卡迪夫",
  "weibo_id": 8
}
17:08:54 完整请求
17:08:54 请求结束
17:08:54 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:08:54 path and query /weibo/index {} 
17:08:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:08:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:08:54 完整请求
17:08:54 完整请求
17:08:54 请求结束
17:08:54 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:08:54 请求结束
17:08:54 path and query /static {'file': 'gua.js'} 
17:08:54 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:08:54 path and query /static {'file': 'weibo.js'} 
17:08:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:08:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:08:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:08:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:08:55 完整请求
17:08:55 请求结束
17:08:55 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:08:55 path and query /api/weibo/all {} 
17:08:55 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:08:55 debug weibo init form = ({}) content =() 
17:08:55 debug weibo init form = ({}) content =() 
17:08:55 debug weibo init form = ({}) content =() 
17:08:55 debug weibo init form = ({}) content =() 
17:08:55 debug weibo init form = ({}) content =() 
17:08:55 debug weibo init form = ({}) content =() 
17:08:55 debug weibo init form = ({}) content =() 
17:08:55 kwargs,  {'weibo_id': 1} <class 'dict'>
17:08:55 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:08:55 kwargs,  {'weibo_id': 1} <class 'dict'>
17:08:55 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:08:55 kwargs,  {'weibo_id': 2} <class 'dict'>
17:08:55 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:08:55 kwargs,  {'weibo_id': 2} <class 'dict'>
17:08:55 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:08:55 kwargs,  {'weibo_id': 8} <class 'dict'>
17:08:55 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
])
17:08:55 kwargs,  {'weibo_id': 8} <class 'dict'>
17:08:55 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}]) type=(<class 'list'>) 
17:08:55 kwargs,  {'weibo_id': 9} <class 'dict'>
17:08:55 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:08:55 kwargs,  {'weibo_id': 9} <class 'dict'>
17:08:55 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:08:55 kwargs,  {'weibo_id': 11} <class 'dict'>
17:08:55 debug Weibo comment([])
17:08:55 kwargs,  {'weibo_id': 11} <class 'dict'>
17:08:55 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:08:55 kwargs,  {'weibo_id': 17} <class 'dict'>
17:08:55 debug Weibo comment([])
17:08:55 kwargs,  {'weibo_id': 17} <class 'dict'>
17:08:55 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:08:55 kwargs,  {'weibo_id': 18} <class 'dict'>
17:08:55 debug Weibo comment([])
17:08:55 kwargs,  {'weibo_id': 18} <class 'dict'>
17:08:55 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:08:55 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:08:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:09:02 完整请求
17:09:02 请求结束
17:09:02 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:09:02 path and query /api/comment/add {} {"weibo_id":"8","content":"爱喝酒撒多喝水复健科"}
17:09:02 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:09:02 路由到了添加评论(<__main__.Request object at 0x03EB3550>)
17:09:02 接收到的前端的数据 {'weibo_id': '8', 'content': '爱喝酒撒多喝水复健科'}
17:09:02 创建的评论对象 < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>

17:09:02 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 27,
  "content": "爱喝酒撒多喝水复健科",
  "weibo_id": 8
})
17:09:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 27,
  "content": "爱喝酒撒多喝水复健科",
  "weibo_id": 8
}
17:10:01 完整请求
17:10:01 请求结束
17:10:01 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:10:01 path and query /weibo/index {} 
17:10:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:10:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:10:01 完整请求
17:10:01 请求结束
17:10:01 完整请求
17:10:01 请求结束
rm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:10:01 path and query /static {'file': 'gua.js'} 
17:10:01 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:10:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:10:01 path and query /static {'file': 'weibo.js'} 
17:10:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

17:10:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                var commentList = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                titleSpan.innerHTML = commentList
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:10:01 完整请求
17:10:01 请求结束
17:10:01 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:10:01 path and query /api/weibo/all {} 
17:10:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:10:01 debug weibo init form = ({}) content =() 
17:10:01 debug weibo init form = ({}) content =() 
17:10:01 debug weibo init form = ({}) content =() 
17:10:01 debug weibo init form = ({}) content =() 
17:10:01 debug weibo init form = ({}) content =() 
17:10:01 debug weibo init form = ({}) content =() 
17:10:01 debug weibo init form = ({}) content =() 
17:10:01 kwargs,  {'weibo_id': 1} <class 'dict'>
17:10:01 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
17:10:01 kwargs,  {'weibo_id': 1} <class 'dict'>
17:10:01 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
17:10:01 kwargs,  {'weibo_id': 2} <class 'dict'>
17:10:01 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
17:10:01 kwargs,  {'weibo_id': 2} <class 'dict'>
17:10:01 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
17:10:01 kwargs,  {'weibo_id': 8} <class 'dict'>
17:10:01 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
])
17:10:01 kwargs,  {'weibo_id': 8} <class 'dict'>
17:10:01 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}]) type=(<class 'list'>) 
17:10:01 kwargs,  {'weibo_id': 9} <class 'dict'>
17:10:01 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
17:10:01 kwargs,  {'weibo_id': 9} <class 'dict'>
17:10:01 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
17:10:01 kwargs,  {'weibo_id': 11} <class 'dict'>
17:10:01 debug Weibo comment([])
17:10:01 kwargs,  {'weibo_id': 11} <class 'dict'>
17:10:01 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:10:01 kwargs,  {'weibo_id': 17} <class 'dict'>
17:10:01 debug Weibo comment([])
17:10:01 kwargs,  {'weibo_id': 17} <class 'dict'>
17:10:01 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
17:10:01 kwargs,  {'weibo_id': 18} <class 'dict'>
17:10:01 debug Weibo comment([])
17:10:01 kwargs,  {'weibo_id': 18} <class 'dict'>
17:10:01 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
17:10:01 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
17:10:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
17:10:08 完整请求
17:10:08 请求结束
17:10:08 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
17:10:08 path and query /api/comment/add {} {"weibo_id":"8","content":"四大复活节"}
17:10:08 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
17:10:08 路由到了添加评论(<__main__.Request object at 0x03EAC930>)
17:10:08 接收到的前端的数据 {'weibo_id': '8', 'content': '四大复活节'}
17:10:08 创建的评论对象 < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>

17:10:08 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 28,
  "content": "四大复活节",
  "weibo_id": 8
})
17:10:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 28,
  "content": "四大复活节",
  "weibo_id": 8
}
17:10:48 完整请求
17:10:48 请求结束
18:20:31 完整请求
18:20:31 请求结束
18:20:31 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:20:31 path and query /weibo/index {} 
18:20:31 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:20:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:20:31 完整请求
18:20:31 请求结束
18:20:31 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:20:31 完整请求
18:20:31 path and query /static {'file': 'gua.js'} 
18:20:31 请求结束
18:20:31 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:20:31 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:20:31 path and query /static {'file': 'weibo.js'} 
() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:20:31 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:20:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', WeiboCell)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:20:31 完整请求
18:20:31 请求结束
18:20:31 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:20:31 path and query /api/weibo/all {} 
18:20:31 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:20:31 debug weibo init form = ({}) content =() 
18:20:31 debug weibo init form = ({}) content =() 
18:20:31 debug weibo init form = ({}) content =() 
18:20:31 debug weibo init form = ({}) content =() 
18:20:31 debug weibo init form = ({}) content =() 
18:20:31 debug weibo init form = ({}) content =() 
18:20:31 debug weibo init form = ({}) content =() 
18:20:31 kwargs,  {'weibo_id': 1} <class 'dict'>
18:20:31 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:20:31 kwargs,  {'weibo_id': 1} <class 'dict'>
18:20:31 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:20:31 kwargs,  {'weibo_id': 2} <class 'dict'>
18:20:31 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:20:31 kwargs,  {'weibo_id': 2} <class 'dict'>
18:20:31 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:20:31 kwargs,  {'weibo_id': 8} <class 'dict'>
18:20:31 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
])
18:20:31 kwargs,  {'weibo_id': 8} <class 'dict'>
18:20:31 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]) type=(<class 'list'>) 
18:20:31 kwargs,  {'weibo_id': 9} <class 'dict'>
18:20:31 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
18:20:31 kwargs,  {'weibo_id': 9} <class 'dict'>
18:20:31 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
18:20:31 kwargs,  {'weibo_id': 11} <class 'dict'>
18:20:31 debug Weibo comment([])
18:20:31 kwargs,  {'weibo_id': 11} <class 'dict'>
18:20:31 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:20:31 kwargs,  {'weibo_id': 17} <class 'dict'>
18:20:31 debug Weibo comment([])
18:20:31 kwargs,  {'weibo_id': 17} <class 'dict'>
18:20:31 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:20:31 kwargs,  {'weibo_id': 18} <class 'dict'>
18:20:31 debug Weibo comment([])
18:20:31 kwargs,  {'weibo_id': 18} <class 'dict'>
18:20:31 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:20:31 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:20:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:23:02 完整请求
18:23:02 请求结束
18:23:02 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:23:02 path and query /weibo/index {} 
18:23:02 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:23:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:23:02 完整请求
18:23:02 请求结束
18:23:02 请求结束
18:23:02 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:23:02 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:23:02 path and query /static {'file': 'weibo.js'} 
18:23:02 path and query /static {'file': 'gua.js'} 
18:23:02 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:23:02 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:23:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    log('html = ', html)
    return html
}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertComment = function(comment){
    //插入comment
    var commentForm = commentsTemplate(comment)
    log('debug insertComent\n', commentForm)
    var WeiboList = e('.weibo-list')
    // 生成的commentForm添加到当前的weibocell中

}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', WeiboCell)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:23:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:23:02 完整请求
18:23:02 请求结束
18:23:02 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:23:02 path and query /api/weibo/all {} 
18:23:02 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:23:02 debug weibo init form = ({}) content =() 
18:23:02 debug weibo init form = ({}) content =() 
18:23:02 debug weibo init form = ({}) content =() 
18:23:02 debug weibo init form = ({}) content =() 
18:23:02 debug weibo init form = ({}) content =() 
18:23:02 debug weibo init form = ({}) content =() 
18:23:02 debug weibo init form = ({}) content =() 
18:23:02 kwargs,  {'weibo_id': 1} <class 'dict'>
18:23:02 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:23:02 kwargs,  {'weibo_id': 1} <class 'dict'>
18:23:02 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:23:02 kwargs,  {'weibo_id': 2} <class 'dict'>
18:23:02 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:23:02 kwargs,  {'weibo_id': 2} <class 'dict'>
18:23:02 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:23:02 kwargs,  {'weibo_id': 8} <class 'dict'>
18:23:02 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
])
18:23:02 kwargs,  {'weibo_id': 8} <class 'dict'>
18:23:02 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]) type=(<class 'list'>) 
18:23:02 kwargs,  {'weibo_id': 9} <class 'dict'>
18:23:02 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
18:23:02 kwargs,  {'weibo_id': 9} <class 'dict'>
18:23:02 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
18:23:02 kwargs,  {'weibo_id': 11} <class 'dict'>
18:23:02 debug Weibo comment([])
18:23:02 kwargs,  {'weibo_id': 11} <class 'dict'>
18:23:02 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:23:02 kwargs,  {'weibo_id': 17} <class 'dict'>
18:23:02 debug Weibo comment([])
18:23:02 kwargs,  {'weibo_id': 17} <class 'dict'>
18:23:02 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:23:02 kwargs,  {'weibo_id': 18} <class 'dict'>
18:23:02 debug Weibo comment([])
18:23:02 kwargs,  {'weibo_id': 18} <class 'dict'>
18:23:02 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:23:02 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:23:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:26:55 完整请求
18:26:55 完整请求
18:26:55 请求结束
18:26:55 请求结束
18:27:54 完整请求
18:27:54 请求结束
18:27:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:27:54 path and query /weibo/index {} 
18:27:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:27:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:27:54 完整请求
18:27:54 请求结束
18:27:54 完整请求
18:27:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:27:54 请求结束
18:27:54 path and query /static {'file': 'gua.js'} 
18:27:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:27:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:27:54 path and query /static {'file': 'weibo.js'} 
18:27:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:27:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:27:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', WeiboCell)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:27:54 完整请求
18:27:54 请求结束
18:27:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:27:54 path and query /api/weibo/all {} 
18:27:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:27:54 debug weibo init form = ({}) content =() 
18:27:54 debug weibo init form = ({}) content =() 
18:27:54 debug weibo init form = ({}) content =() 
18:27:54 debug weibo init form = ({}) content =() 
18:27:54 debug weibo init form = ({}) content =() 
18:27:54 debug weibo init form = ({}) content =() 
18:27:54 debug weibo init form = ({}) content =() 
18:27:54 kwargs,  {'weibo_id': 1} <class 'dict'>
18:27:54 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:27:54 kwargs,  {'weibo_id': 1} <class 'dict'>
18:27:54 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:27:54 kwargs,  {'weibo_id': 2} <class 'dict'>
18:27:54 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:27:54 kwargs,  {'weibo_id': 2} <class 'dict'>
18:27:54 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:27:54 kwargs,  {'weibo_id': 8} <class 'dict'>
18:27:54 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
])
18:27:54 kwargs,  {'weibo_id': 8} <class 'dict'>
18:27:54 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]) type=(<class 'list'>) 
18:27:54 kwargs,  {'weibo_id': 9} <class 'dict'>
18:27:54 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
18:27:54 kwargs,  {'weibo_id': 9} <class 'dict'>
18:27:54 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
18:27:54 kwargs,  {'weibo_id': 11} <class 'dict'>
18:27:54 debug Weibo comment([])
18:27:54 kwargs,  {'weibo_id': 11} <class 'dict'>
18:27:54 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:27:54 kwargs,  {'weibo_id': 17} <class 'dict'>
18:27:54 debug Weibo comment([])
18:27:54 kwargs,  {'weibo_id': 17} <class 'dict'>
18:27:54 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:27:54 kwargs,  {'weibo_id': 18} <class 'dict'>
18:27:54 debug Weibo comment([])
18:27:54 kwargs,  {'weibo_id': 18} <class 'dict'>
18:27:54 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:27:54 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:27:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:28:37 完整请求
18:28:37 请求结束
18:28:37 请求结束
18:28:37 完整请求
18:28:37 请求结束
18:28:37 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:37 path and query /weibo/index {} 
18:28:37 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:28:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:28:37 完整请求
18:28:37 请求结束
18:28:37 完整请求
18:28:37 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:37 请求结束
18:28:37 path and query /static {'file': 'gua.js'} 
18:28:37 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:37 path and query /static {'file': 'weibo.js'} 
18:28:37 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:28:37 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:28:37 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:28:37 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', WeiboCell)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:28:37 完整请求
18:28:37 请求结束
18:28:37 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:37 path and query /api/weibo/all {} 
18:28:37 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:28:37 debug weibo init form = ({}) content =() 
18:28:37 debug weibo init form = ({}) content =() 
18:28:37 debug weibo init form = ({}) content =() 
18:28:37 debug weibo init form = ({}) content =() 
18:28:37 debug weibo init form = ({}) content =() 
18:28:37 debug weibo init form = ({}) content =() 
18:28:37 debug weibo init form = ({}) content =() 
18:28:37 kwargs,  {'weibo_id': 1} <class 'dict'>
18:28:37 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:28:37 kwargs,  {'weibo_id': 1} <class 'dict'>
18:28:37 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:28:37 kwargs,  {'weibo_id': 2} <class 'dict'>
18:28:37 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:28:37 kwargs,  {'weibo_id': 2} <class 'dict'>
18:28:37 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:28:37 kwargs,  {'weibo_id': 8} <class 'dict'>
18:28:37 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
])
18:28:37 kwargs,  {'weibo_id': 8} <class 'dict'>
18:28:37 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]) type=(<class 'list'>) 
18:28:37 kwargs,  {'weibo_id': 9} <class 'dict'>
18:28:37 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
18:28:37 kwargs,  {'weibo_id': 9} <class 'dict'>
18:28:37 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
18:28:37 kwargs,  {'weibo_id': 11} <class 'dict'>
18:28:37 debug Weibo comment([])
18:28:37 kwargs,  {'weibo_id': 11} <class 'dict'>
18:28:37 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:28:37 kwargs,  {'weibo_id': 17} <class 'dict'>
18:28:37 debug Weibo comment([])
18:28:37 kwargs,  {'weibo_id': 17} <class 'dict'>
18:28:37 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:28:37 kwargs,  {'weibo_id': 18} <class 'dict'>
18:28:37 debug Weibo comment([])
18:28:37 kwargs,  {'weibo_id': 18} <class 'dict'>
18:28:37 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:28:37 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:28:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:28:54 完整请求
18:28:54 请求结束
18:28:54 请求结束
18:28:54 完整请求
18:28:54 请求结束
18:28:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:54 path and query /weibo/index {} 
18:28:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:28:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:28:54 完整请求
18:28:54 请求结束
18:28:54 完整请求
18:28:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:54 请求结束
18:28:54 path and query /static {'file': 'gua.js'} 
18:28:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:28:54 path and query /static {'file': 'weibo.js'} 
18:28:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:28:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', WeiboCell)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:28:55 完整请求
18:28:55 请求结束
18:28:55 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:28:55 path and query /api/weibo/all {} 
18:28:55 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:28:55 debug weibo init form = ({}) content =() 
18:28:55 debug weibo init form = ({}) content =() 
18:28:55 debug weibo init form = ({}) content =() 
18:28:55 debug weibo init form = ({}) content =() 
18:28:55 debug weibo init form = ({}) content =() 
18:28:55 debug weibo init form = ({}) content =() 
18:28:55 debug weibo init form = ({}) content =() 
18:28:55 kwargs,  {'weibo_id': 1} <class 'dict'>
18:28:55 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:28:55 kwargs,  {'weibo_id': 1} <class 'dict'>
18:28:55 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:28:55 kwargs,  {'weibo_id': 2} <class 'dict'>
18:28:55 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:28:55 kwargs,  {'weibo_id': 2} <class 'dict'>
18:28:55 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:28:55 kwargs,  {'weibo_id': 8} <class 'dict'>
18:28:55 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
])
18:28:55 kwargs,  {'weibo_id': 8} <class 'dict'>
18:28:55 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]) type=(<class 'list'>) 
18:28:55 kwargs,  {'weibo_id': 9} <class 'dict'>
18:28:55 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
18:28:55 kwargs,  {'weibo_id': 9} <class 'dict'>
18:28:55 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
18:28:55 kwargs,  {'weibo_id': 11} <class 'dict'>
18:28:55 debug Weibo comment([])
18:28:55 kwargs,  {'weibo_id': 11} <class 'dict'>
18:28:55 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:28:55 kwargs,  {'weibo_id': 17} <class 'dict'>
18:28:55 debug Weibo comment([])
18:28:55 kwargs,  {'weibo_id': 17} <class 'dict'>
18:28:55 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:28:55 kwargs,  {'weibo_id': 18} <class 'dict'>
18:28:55 debug Weibo comment([])
18:28:55 kwargs,  {'weibo_id': 18} <class 'dict'>
18:28:55 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:28:55 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:28:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:30:04 完整请求
18:30:04 完整请求
18:30:04 请求结束
18:30:04 请求结束
18:31:42 完整请求
18:31:42 请求结束
18:31:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:31:42 path and query /weibo/index {} 
18:31:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:31:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:31:42 完整请求
18:31:42 请求结束
18:31:42 完整请求
18:31:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:31:42 请求结束
18:31:42 path and query /static {'file': 'gua.js'} 
18:31:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:31:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:31:42 path and query /static {'file': 'weibo.js'} 
18:31:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:31:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:31:42 完整请求
18:31:42 请求结束
18:31:42 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:31:42 path and query /api/weibo/all {} 
18:31:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:31:42 debug weibo init form = ({}) content =() 
18:31:42 debug weibo init form = ({}) content =() 
18:31:42 debug weibo init form = ({}) content =() 
18:31:42 debug weibo init form = ({}) content =() 
18:31:42 debug weibo init form = ({}) content =() 
18:31:42 debug weibo init form = ({}) content =() 
18:31:42 debug weibo init form = ({}) content =() 
18:31:42 kwargs,  {'weibo_id': 1} <class 'dict'>
18:31:42 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:31:42 kwargs,  {'weibo_id': 1} <class 'dict'>
18:31:42 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:31:42 kwargs,  {'weibo_id': 2} <class 'dict'>
18:31:42 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:31:42 kwargs,  {'weibo_id': 2} <class 'dict'>
18:31:42 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:31:42 kwargs,  {'weibo_id': 8} <class 'dict'>
18:31:42 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
])
18:31:42 kwargs,  {'weibo_id': 8} <class 'dict'>
18:31:42 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}]) type=(<class 'list'>) 
18:31:42 kwargs,  {'weibo_id': 9} <class 'dict'>
18:31:42 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
18:31:42 kwargs,  {'weibo_id': 9} <class 'dict'>
18:31:42 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
18:31:42 kwargs,  {'weibo_id': 11} <class 'dict'>
18:31:42 debug Weibo comment([])
18:31:42 kwargs,  {'weibo_id': 11} <class 'dict'>
18:31:42 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:31:42 kwargs,  {'weibo_id': 17} <class 'dict'>
18:31:42 debug Weibo comment([])
18:31:42 kwargs,  {'weibo_id': 17} <class 'dict'>
18:31:42 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:31:42 kwargs,  {'weibo_id': 18} <class 'dict'>
18:31:42 debug Weibo comment([])
18:31:42 kwargs,  {'weibo_id': 18} <class 'dict'>
18:31:42 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:31:42 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:31:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:31:48 完整请求
18:31:48 请求结束
18:31:48 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:31:48 path and query /api/comment/add {} 
18:31:48 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:31:48 路由到了添加评论(<__main__.Request object at 0x03E97FD0>)
18:31:48 完整请求
18:31:48 请求结束
18:31:48 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:31:48 path and query /api/comment/add {} 
18:31:48 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:31:48 路由到了添加评论(<__main__.Request object at 0x03E97FD0>)
18:32:00 完整请求
18:32:00 请求结束
18:32:00 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:32:00 path and query /api/comment/add {} {"weibo_id":"8","content":"阿达的痕迹"}
18:32:00 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:00 路由到了添加评论(<__main__.Request object at 0x03E97FD0>)
18:32:00 接收到的前端的数据 {'weibo_id': '8', 'content': '阿达的痕迹'}
18:32:00 创建的评论对象 < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>

18:32:00 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 29,
  "content": "阿达的痕迹",
  "weibo_id": 8
})
18:32:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 29,
  "content": "阿达的痕迹",
  "weibo_id": 8
}
18:32:00 完整请求
18:32:00 请求结束
18:32:00 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:32:00 path and query /api/comment/add {} 
18:32:00 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:00 路由到了添加评论(<__main__.Request object at 0x03EC09D0>)
18:32:08 完整请求
18:32:08 请求结束
18:32:08 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:32:08 path and query /static {'file': 'weibo.js'} 
18:32:08 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:32:33 完整请求
18:32:33 请求结束
18:32:33 完整请求
18:32:33 请求结束
18:32:33 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:32:33 path and query /weibo/index {} 
18:32:33 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:32:33 完整请求
18:32:33 完整请求
18:32:33 请求结束
18:32:33 请求结束
18:32:33 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:32:33 path and query /static {'file': 'gua.js'} 
18:32:33 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:32:33 path and query /static {'file': 'weibo.js'} 
18:32:33 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:33 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:32:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent
                var weiboCell = e(selector)
                log('selector=', selector, commentList, weiboCell)
                log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:32:33 完整请求
18:32:33 请求结束
18:32:33 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:32:33 path and query /api/weibo/all {} 
18:32:33 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:33 debug weibo init form = ({}) content =() 
18:32:33 debug weibo init form = ({}) content =() 
18:32:33 debug weibo init form = ({}) content =() 
18:32:33 debug weibo init form = ({}) content =() 
18:32:33 debug weibo init form = ({}) content =() 
18:32:33 debug weibo init form = ({}) content =() 
18:32:33 debug weibo init form = ({}) content =() 
18:32:33 kwargs,  {'weibo_id': 1} <class 'dict'>
18:32:33 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:32:33 kwargs,  {'weibo_id': 1} <class 'dict'>
18:32:33 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:32:33 kwargs,  {'weibo_id': 2} <class 'dict'>
18:32:33 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:32:33 kwargs,  {'weibo_id': 2} <class 'dict'>
18:32:34 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:32:34 kwargs,  {'weibo_id': 8} <class 'dict'>
18:32:34 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
])
18:32:34 kwargs,  {'weibo_id': 8} <class 'dict'>
18:32:34 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}]) type=(<class 'list'>) 
18:32:34 kwargs,  {'weibo_id': 9} <class 'dict'>
18:32:34 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
])
18:32:34 kwargs,  {'weibo_id': 9} <class 'dict'>
18:32:34 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}]) type=(<class 'list'>) 
18:32:34 kwargs,  {'weibo_id': 11} <class 'dict'>
18:32:34 debug Weibo comment([])
18:32:34 kwargs,  {'weibo_id': 11} <class 'dict'>
18:32:34 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:32:34 kwargs,  {'weibo_id': 17} <class 'dict'>
18:32:34 debug Weibo comment([])
18:32:34 kwargs,  {'weibo_id': 17} <class 'dict'>
18:32:34 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:32:34 kwargs,  {'weibo_id': 18} <class 'dict'>
18:32:34 debug Weibo comment([])
18:32:34 kwargs,  {'weibo_id': 18} <class 'dict'>
18:32:34 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:32:34 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:32:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:32:39 完整请求
18:32:39 请求结束
18:32:39 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:32:39 path and query /api/comment/add {} 
18:32:39 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:39 路由到了添加评论(<__main__.Request object at 0x03EC0670>)
18:32:39 完整请求
18:32:39 请求结束
18:32:39 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:32:39 path and query /api/comment/add {} 
18:32:39 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:32:39 路由到了添加评论(<__main__.Request object at 0x03EC0650>)
18:37:46 完整请求
18:37:46 请求结束
18:37:46 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:37:46 path and query /weibo/index {} 
18:37:46 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:37:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:37:46 完整请求
18:37:46 请求结束
18:37:46 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:37:46 path and query /api/comment/add {} {"weibo_id":"9","content":"阿萨德"}
18:37:46 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:37:46 路由到了添加评论(<__main__.Request object at 0x03EC0650>)
18:37:46 接收到的前端的数据 {'weibo_id': '9', 'content': '阿萨德'}
18:37:46 创建的评论对象 < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>

18:37:46 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 30,
  "content": "阿萨德",
  "weibo_id": 9
})
18:37:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 30,
  "content": "阿萨德",
  "weibo_id": 9
}
18:37:46 完整请求
18:37:46 完整请求
18:37:46 请求结束
18:37:46 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:37:46 请求结束
18:37:46 path and query /static {'file': 'gua.js'} 
18:37:46 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:37:46 path and query /static {'file': 'weibo.js'} 
18:37:46 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:37:46 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:37:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:37:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:37:47 完整请求
18:37:47 请求结束
18:37:47 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:37:47 path and query /api/weibo/all {} 
18:37:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:37:47 debug weibo init form = ({}) content =() 
18:37:47 debug weibo init form = ({}) content =() 
18:37:47 debug weibo init form = ({}) content =() 
18:37:47 debug weibo init form = ({}) content =() 
18:37:47 debug weibo init form = ({}) content =() 
18:37:47 debug weibo init form = ({}) content =() 
18:37:47 debug weibo init form = ({}) content =() 
18:37:47 kwargs,  {'weibo_id': 1} <class 'dict'>
18:37:47 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:37:47 kwargs,  {'weibo_id': 1} <class 'dict'>
18:37:47 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:37:47 kwargs,  {'weibo_id': 2} <class 'dict'>
18:37:47 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:37:47 kwargs,  {'weibo_id': 2} <class 'dict'>
18:37:47 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:37:47 kwargs,  {'weibo_id': 8} <class 'dict'>
18:37:47 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
])
18:37:47 kwargs,  {'weibo_id': 8} <class 'dict'>
18:37:47 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}]) type=(<class 'list'>) 
18:37:47 kwargs,  {'weibo_id': 9} <class 'dict'>
18:37:47 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:37:47 kwargs,  {'weibo_id': 9} <class 'dict'>
18:37:47 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:37:47 kwargs,  {'weibo_id': 11} <class 'dict'>
18:37:47 debug Weibo comment([])
18:37:47 kwargs,  {'weibo_id': 11} <class 'dict'>
18:37:47 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:37:47 kwargs,  {'weibo_id': 17} <class 'dict'>
18:37:47 debug Weibo comment([])
18:37:47 kwargs,  {'weibo_id': 17} <class 'dict'>
18:37:47 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:37:47 kwargs,  {'weibo_id': 18} <class 'dict'>
18:37:47 debug Weibo comment([])
18:37:47 kwargs,  {'weibo_id': 18} <class 'dict'>
18:37:47 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:37:47 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:37:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:37:47 完整请求
18:37:47 请求结束
18:37:47 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:37:47 path and query /static {'file': 'weibo.js'} 
18:37:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:37:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:37:55 完整请求
18:37:55 请求结束
18:37:55 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:37:55 path and query /api/comment/add {} {"weibo_id":"8","content":"大厦数据库"}
18:37:55 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:37:55 路由到了添加评论(<__main__.Request object at 0x03E97DF0>)
18:37:55 接收到的前端的数据 {'weibo_id': '8', 'content': '大厦数据库'}
18:37:55 创建的评论对象 < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>

18:37:55 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 31,
  "content": "大厦数据库",
  "weibo_id": 8
})
18:37:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 31,
  "content": "大厦数据库",
  "weibo_id": 8
}
18:38:15 完整请求
18:38:15 请求结束
18:38:40 完整请求
18:38:40 请求结束
18:38:40 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:38:40 path and query /weibo/index {} 
18:38:40 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:38:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:38:40 完整请求
18:38:40 完整请求
18:38:40 请求结束
18:38:40 请求结束
18:38:40 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:38:40 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:38:40 path and query /static {'file': 'gua.js'} 
18:38:40 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:38:40 path and query /static {'file': 'weibo.js'} 
18:38:40 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:38:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:38:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:38:41 完整请求
18:38:41 请求结束
18:38:41 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:38:41 path and query /api/weibo/all {} 
18:38:41 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:38:41 debug weibo init form = ({}) content =() 
18:38:41 debug weibo init form = ({}) content =() 
18:38:41 debug weibo init form = ({}) content =() 
18:38:41 debug weibo init form = ({}) content =() 
18:38:41 debug weibo init form = ({}) content =() 
18:38:41 debug weibo init form = ({}) content =() 
18:38:41 debug weibo init form = ({}) content =() 
18:38:41 kwargs,  {'weibo_id': 1} <class 'dict'>
18:38:41 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:38:41 kwargs,  {'weibo_id': 1} <class 'dict'>
18:38:41 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:38:41 kwargs,  {'weibo_id': 2} <class 'dict'>
18:38:41 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:38:41 kwargs,  {'weibo_id': 2} <class 'dict'>
18:38:41 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:38:41 kwargs,  {'weibo_id': 8} <class 'dict'>
18:38:41 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
])
18:38:41 kwargs,  {'weibo_id': 8} <class 'dict'>
18:38:41 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}]) type=(<class 'list'>) 
18:38:41 kwargs,  {'weibo_id': 9} <class 'dict'>
18:38:41 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:38:41 kwargs,  {'weibo_id': 9} <class 'dict'>
18:38:41 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:38:41 kwargs,  {'weibo_id': 11} <class 'dict'>
18:38:41 debug Weibo comment([])
18:38:41 kwargs,  {'weibo_id': 11} <class 'dict'>
18:38:41 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:38:41 kwargs,  {'weibo_id': 17} <class 'dict'>
18:38:41 debug Weibo comment([])
18:38:41 kwargs,  {'weibo_id': 17} <class 'dict'>
18:38:41 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:38:41 kwargs,  {'weibo_id': 18} <class 'dict'>
18:38:41 debug Weibo comment([])
18:38:41 kwargs,  {'weibo_id': 18} <class 'dict'>
18:38:41 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:38:41 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:38:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:38:41 完整请求
18:38:41 请求结束
18:38:41 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:38:41 path and query /static {'file': 'weibo.js'} 
18:38:41 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:38:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:38:45 完整请求
18:38:45 请求结束
18:38:45 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:38:45 path and query /api/comment/add {} {"weibo_id":"8","content":"水电费和进口量"}
18:38:45 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:38:45 路由到了添加评论(<__main__.Request object at 0x03E97ED0>)
18:38:45 接收到的前端的数据 {'weibo_id': '8', 'content': '水电费和进口量'}
18:38:45 创建的评论对象 < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>

18:38:45 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 32,
  "content": "水电费和进口量",
  "weibo_id": 8
})
18:38:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 32,
  "content": "水电费和进口量",
  "weibo_id": 8
}
18:39:06 完整请求
18:39:06 请求结束
18:39:06 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:39:06 path and query /weibo/index {} 
18:39:06 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:39:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:39:06 完整请求
18:39:06 完整请求
18:39:06 请求结束
18:39:06 请求结束
18:39:06 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:39:06 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:39:06 path and query /static {'file': 'gua.js'} 
18:39:06 path and query /static {'file': 'weibo.js'} 
18:39:06 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:39:06 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:39:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:39:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:39:06 完整请求
18:39:06 请求结束
18:39:06 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:39:06 path and query /api/weibo/all {} 
18:39:06 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:39:06 debug weibo init form = ({}) content =() 
18:39:06 debug weibo init form = ({}) content =() 
18:39:06 debug weibo init form = ({}) content =() 
18:39:06 debug weibo init form = ({}) content =() 
18:39:06 debug weibo init form = ({}) content =() 
18:39:06 debug weibo init form = ({}) content =() 
18:39:06 debug weibo init form = ({}) content =() 
18:39:06 kwargs,  {'weibo_id': 1} <class 'dict'>
18:39:06 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:39:06 kwargs,  {'weibo_id': 1} <class 'dict'>
18:39:06 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:39:06 kwargs,  {'weibo_id': 2} <class 'dict'>
18:39:06 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:39:06 kwargs,  {'weibo_id': 2} <class 'dict'>
18:39:06 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:39:06 kwargs,  {'weibo_id': 8} <class 'dict'>
18:39:06 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
, < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>
])
18:39:06 kwargs,  {'weibo_id': 8} <class 'dict'>
18:39:06 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}]) type=(<class 'list'>) 
18:39:06 kwargs,  {'weibo_id': 9} <class 'dict'>
18:39:06 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:39:06 kwargs,  {'weibo_id': 9} <class 'dict'>
18:39:06 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:39:06 kwargs,  {'weibo_id': 11} <class 'dict'>
18:39:06 debug Weibo comment([])
18:39:06 kwargs,  {'weibo_id': 11} <class 'dict'>
18:39:06 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:39:06 kwargs,  {'weibo_id': 17} <class 'dict'>
18:39:06 debug Weibo comment([])
18:39:06 kwargs,  {'weibo_id': 17} <class 'dict'>
18:39:06 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:39:06 kwargs,  {'weibo_id': 18} <class 'dict'>
18:39:06 debug Weibo comment([])
18:39:06 kwargs,  {'weibo_id': 18} <class 'dict'>
18:39:06 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:39:06 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:39:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:39:06 完整请求
18:39:06 请求结束
18:39:06 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:39:06 path and query /static {'file': 'weibo.js'} 
18:39:06 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:39:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComent\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComent(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:39:15 完整请求
18:39:15 请求结束
18:39:15 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:39:15 path and query /api/comment/add {} {"weibo_id":"8","content":"安抚"}
18:39:15 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:39:15 路由到了添加评论(<__main__.Request object at 0x03EC0730>)
18:39:15 接收到的前端的数据 {'weibo_id': '8', 'content': '安抚'}
18:39:15 创建的评论对象 < Comment
id: (33)
content: (安抚)
weibo_id: (8) 
>

18:39:15 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 33,
  "content": "安抚",
  "weibo_id": 8
})
18:39:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 33,
  "content": "安抚",
  "weibo_id": 8
}
18:40:01 完整请求
18:40:01 请求结束
18:40:01 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:01 path and query /weibo/index {} 
18:40:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:40:01 完整请求
18:40:01 完整请求
18:40:01 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:01 请求结束
18:40:01 path and query /static {'file': 'gua.js'} 
18:40:01 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:40:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:40:01 完整请求
18:40:01 请求结束
18:40:01 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:01 path and query /api/weibo/all {} 
18:40:01 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:01 debug weibo init form = ({}) content =() 
18:40:01 debug weibo init form = ({}) content =() 
18:40:01 debug weibo init form = ({}) content =() 
18:40:01 debug weibo init form = ({}) content =() 
18:40:01 debug weibo init form = ({}) content =() 
18:40:01 debug weibo init form = ({}) content =() 
18:40:01 debug weibo init form = ({}) content =() 
18:40:01 kwargs,  {'weibo_id': 1} <class 'dict'>
18:40:01 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:40:01 kwargs,  {'weibo_id': 1} <class 'dict'>
18:40:01 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:40:01 kwargs,  {'weibo_id': 2} <class 'dict'>
18:40:01 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:40:01 kwargs,  {'weibo_id': 2} <class 'dict'>
18:40:01 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:40:01 kwargs,  {'weibo_id': 8} <class 'dict'>
18:40:01 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
, < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>
, < Comment
id: (33)
content: (安抚)
weibo_id: (8) 
>
])
18:40:01 kwargs,  {'weibo_id': 8} <class 'dict'>
18:40:01 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}]) type=(<class 'list'>) 
18:40:01 kwargs,  {'weibo_id': 9} <class 'dict'>
18:40:01 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:40:01 kwargs,  {'weibo_id': 9} <class 'dict'>
18:40:01 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:40:01 kwargs,  {'weibo_id': 11} <class 'dict'>
18:40:01 debug Weibo comment([])
18:40:01 kwargs,  {'weibo_id': 11} <class 'dict'>
18:40:01 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:40:01 kwargs,  {'weibo_id': 17} <class 'dict'>
18:40:01 debug Weibo comment([])
18:40:01 kwargs,  {'weibo_id': 17} <class 'dict'>
18:40:01 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:40:01 kwargs,  {'weibo_id': 18} <class 'dict'>
18:40:01 debug Weibo comment([])
18:40:01 kwargs,  {'weibo_id': 18} <class 'dict'>
18:40:01 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': []})comments([]) type=(<class 'list'>) 
18:40:01 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
])
18:40:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": []
  }
]
18:40:02 完整请求
18:40:02 请求结束
18:40:02 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:02 path and query /static {'file': 'weibo.js'} 
18:40:02 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:40:07 完整请求
18:40:07 请求结束
18:40:07 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:07 path and query /api/comment/add {} {"weibo_id":"8","content":"涉及到付款"}
18:40:07 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:07 路由到了添加评论(<__main__.Request object at 0x03EC0730>)
18:40:07 接收到的前端的数据 {'weibo_id': '8', 'content': '涉及到付款'}
18:40:07 创建的评论对象 < Comment
id: (34)
content: (涉及到付款)
weibo_id: (8) 
>

18:40:07 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 34,
  "content": "涉及到付款",
  "weibo_id": 8
})
18:40:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 34,
  "content": "涉及到付款",
  "weibo_id": 8
}
18:40:20 完整请求
18:40:20 请求结束
18:40:20 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:21 path and query /api/comment/add {} {"weibo_id":"18","content":"阿世纪东方"}
18:40:21 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:21 路由到了添加评论(<__main__.Request object at 0x03EC0730>)
18:40:21 接收到的前端的数据 {'weibo_id': '18', 'content': '阿世纪东方'}
18:40:21 创建的评论对象 < Comment
id: (35)
content: (阿世纪东方)
weibo_id: (18) 
>

18:40:21 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 35,
  "content": "阿世纪东方",
  "weibo_id": 18
})
18:40:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 35,
  "content": "阿世纪东方",
  "weibo_id": 18
}
18:40:25 完整请求
18:40:25 请求结束
18:40:25 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:25 path and query /api/comment/add {} {"weibo_id":"18","content":"阿世纪东方范德萨"}
18:40:25 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:25 路由到了添加评论(<__main__.Request object at 0x03EC0730>)
18:40:25 接收到的前端的数据 {'weibo_id': '18', 'content': '阿世纪东方范德萨'}
18:40:25 创建的评论对象 < Comment
id: (36)
content: (阿世纪东方范德萨)
weibo_id: (18) 
>

18:40:25 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 36,
  "content": "阿世纪东方范德萨",
  "weibo_id": 18
})
18:40:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 36,
  "content": "阿世纪东方范德萨",
  "weibo_id": 18
}
18:40:31 完整请求
18:40:31 请求结束
18:40:31 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:31 path and query /api/comment/add {} {"weibo_id":"18","content":"分"}
18:40:31 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:31 路由到了添加评论(<__main__.Request object at 0x03EC0730>)
18:40:31 接收到的前端的数据 {'weibo_id': '18', 'content': '分'}
18:40:31 创建的评论对象 < Comment
id: (37)
content: (分)
weibo_id: (18) 
>

18:40:31 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 37,
  "content": "分",
  "weibo_id": 18
})
18:40:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 37,
  "content": "分",
  "weibo_id": 18
}
18:40:34 完整请求
18:40:34 请求结束
18:40:34 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:40:34 path and query /api/comment/add {} {"weibo_id":"18","content":"分阿凡达"}
18:40:34 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:40:34 路由到了添加评论(<__main__.Request object at 0x03EC0730>)
18:40:34 接收到的前端的数据 {'weibo_id': '18', 'content': '分阿凡达'}
18:40:34 创建的评论对象 < Comment
id: (38)
content: (分阿凡达)
weibo_id: (18) 
>

18:40:34 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 38,
  "content": "分阿凡达",
  "weibo_id": 18
})
18:40:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 38,
  "content": "分阿凡达",
  "weibo_id": 18
}
18:41:32 完整请求
18:41:32 请求结束
18:41:32 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:41:32 path and query /weibo/index {} 
18:41:32 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:41:32 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: red;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:41:32 完整请求
18:41:32 请求结束
18:41:32 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:41:32 完整请求
18:41:32 path and query /static {'file': 'gua.js'} 
18:41:32 请求结束
18:41:32 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:41:32 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:41:32 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:41:32 path and query /static {'file': 'weibo.js'} 
18:41:32 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:41:32 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:41:32 完整请求
18:41:32 请求结束
18:41:32 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:41:32 path and query /api/weibo/all {} 
18:41:32 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:41:32 debug weibo init form = ({}) content =() 
18:41:32 debug weibo init form = ({}) content =() 
18:41:32 debug weibo init form = ({}) content =() 
18:41:32 debug weibo init form = ({}) content =() 
18:41:32 debug weibo init form = ({}) content =() 
18:41:32 debug weibo init form = ({}) content =() 
18:41:32 debug weibo init form = ({}) content =() 
18:41:32 kwargs,  {'weibo_id': 1} <class 'dict'>
18:41:32 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:41:32 kwargs,  {'weibo_id': 1} <class 'dict'>
18:41:32 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:41:32 kwargs,  {'weibo_id': 2} <class 'dict'>
18:41:32 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:41:32 kwargs,  {'weibo_id': 2} <class 'dict'>
18:41:32 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:41:32 kwargs,  {'weibo_id': 8} <class 'dict'>
18:41:32 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
, < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>
, < Comment
id: (33)
content: (安抚)
weibo_id: (8) 
>
, < Comment
id: (34)
content: (涉及到付款)
weibo_id: (8) 
>
])
18:41:32 kwargs,  {'weibo_id': 8} <class 'dict'>
18:41:32 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]) type=(<class 'list'>) 
18:41:32 kwargs,  {'weibo_id': 9} <class 'dict'>
18:41:32 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:41:32 kwargs,  {'weibo_id': 9} <class 'dict'>
18:41:32 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:41:32 kwargs,  {'weibo_id': 11} <class 'dict'>
18:41:32 debug Weibo comment([])
18:41:32 kwargs,  {'weibo_id': 11} <class 'dict'>
18:41:32 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:41:32 kwargs,  {'weibo_id': 17} <class 'dict'>
18:41:32 debug Weibo comment([])
18:41:32 kwargs,  {'weibo_id': 17} <class 'dict'>
18:41:32 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:41:32 kwargs,  {'weibo_id': 18} <class 'dict'>
18:41:32 debug Weibo comment([< Comment
id: (35)
content: (阿世纪东方)
weibo_id: (18) 
>
, < Comment
id: (36)
content: (阿世纪东方范德萨)
weibo_id: (18) 
>
, < Comment
id: (37)
content: (分)
weibo_id: (18) 
>
, < Comment
id: (38)
content: (分阿凡达)
weibo_id: (18) 
>
])
18:41:32 kwargs,  {'weibo_id': 18} <class 'dict'>
18:41:32 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': [{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}]})comments([{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}]) type=(<class 'list'>) 
18:41:32 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": [
      {
        "id": 35,
        "content": "阿世纪东方",
        "weibo_id": 18
      },
      {
        "id": 36,
        "content": "阿世纪东方范德萨",
        "weibo_id": 18
      },
      {
        "id": 37,
        "content": "分",
        "weibo_id": 18
      },
      {
        "id": 38,
        "content": "分阿凡达",
        "weibo_id": 18
      }
    ]
  }
])
18:41:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": [
      {
        "id": 35,
        "content": "阿世纪东方",
        "weibo_id": 18
      },
      {
        "id": 36,
        "content": "阿世纪东方范德萨",
        "weibo_id": 18
      },
      {
        "id": 37,
        "content": "分",
        "weibo_id": 18
      },
      {
        "id": 38,
        "content": "分阿凡达",
        "weibo_id": 18
      }
    ]
  }
]
18:41:32 完整请求
18:41:32 请求结束
18:41:32 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:41:32 path and query /static {'file': 'weibo.js'} 
18:41:32 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:41:32 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:41:42 完整请求
18:41:42 请求结束
18:41:42 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:41:42 path and query /api/comment/add {} {"weibo_id":"18","content":"阿萨德发来看"}
18:41:42 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:41:42 路由到了添加评论(<__main__.Request object at 0x03E97FF0>)
18:41:42 接收到的前端的数据 {'weibo_id': '18', 'content': '阿萨德发来看'}
18:41:42 创建的评论对象 < Comment
id: (39)
content: (阿萨德发来看)
weibo_id: (18) 
>

18:41:42 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 39,
  "content": "阿萨德发来看",
  "weibo_id": 18
})
18:41:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 39,
  "content": "阿萨德发来看",
  "weibo_id": 18
}
18:48:47 完整请求
18:48:47 请求结束
18:48:47 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:48:47 path and query /weibo/index {} 
18:48:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:48:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #3c3c3c;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:48:47 完整请求
18:48:47 请求结束
18:48:47 完整请求
18:48:47 请求结束
18:48:47 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:48:47 path and query /static {'file': 'gua.js'} 
18:48:47 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:48:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:48:47 path and query /static {'file': 'weibo.js'} 
18:48:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:48:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:48:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:48:47 完整请求
18:48:47 请求结束
18:48:47 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:48:47 path and query /api/weibo/all {} 
18:48:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:48:47 debug weibo init form = ({}) content =() 
18:48:47 debug weibo init form = ({}) content =() 
18:48:47 debug weibo init form = ({}) content =() 
18:48:47 debug weibo init form = ({}) content =() 
18:48:47 debug weibo init form = ({}) content =() 
18:48:47 debug weibo init form = ({}) content =() 
18:48:47 debug weibo init form = ({}) content =() 
18:48:47 kwargs,  {'weibo_id': 1} <class 'dict'>
18:48:47 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:48:47 kwargs,  {'weibo_id': 1} <class 'dict'>
18:48:47 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:48:47 kwargs,  {'weibo_id': 2} <class 'dict'>
18:48:47 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:48:47 kwargs,  {'weibo_id': 2} <class 'dict'>
18:48:47 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:48:47 kwargs,  {'weibo_id': 8} <class 'dict'>
18:48:47 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
, < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>
, < Comment
id: (33)
content: (安抚)
weibo_id: (8) 
>
, < Comment
id: (34)
content: (涉及到付款)
weibo_id: (8) 
>
])
18:48:47 kwargs,  {'weibo_id': 8} <class 'dict'>
18:48:47 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]) type=(<class 'list'>) 
18:48:47 kwargs,  {'weibo_id': 9} <class 'dict'>
18:48:47 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:48:47 kwargs,  {'weibo_id': 9} <class 'dict'>
18:48:47 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:48:47 kwargs,  {'weibo_id': 11} <class 'dict'>
18:48:47 debug Weibo comment([])
18:48:47 kwargs,  {'weibo_id': 11} <class 'dict'>
18:48:47 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:48:47 kwargs,  {'weibo_id': 17} <class 'dict'>
18:48:47 debug Weibo comment([])
18:48:47 kwargs,  {'weibo_id': 17} <class 'dict'>
18:48:47 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:48:47 kwargs,  {'weibo_id': 18} <class 'dict'>
18:48:47 debug Weibo comment([< Comment
id: (35)
content: (阿世纪东方)
weibo_id: (18) 
>
, < Comment
id: (36)
content: (阿世纪东方范德萨)
weibo_id: (18) 
>
, < Comment
id: (37)
content: (分)
weibo_id: (18) 
>
, < Comment
id: (38)
content: (分阿凡达)
weibo_id: (18) 
>
, < Comment
id: (39)
content: (阿萨德发来看)
weibo_id: (18) 
>
])
18:48:47 kwargs,  {'weibo_id': 18} <class 'dict'>
18:48:47 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': [{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}, {'id': 39, 'content': '阿萨德发来看', 'weibo_id': 18}]})comments([{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}, {'id': 39, 'content': '阿萨德发来看', 'weibo_id': 18}]) type=(<class 'list'>) 
18:48:47 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": [
      {
        "id": 35,
        "content": "阿世纪东方",
        "weibo_id": 18
      },
      {
        "id": 36,
        "content": "阿世纪东方范德萨",
        "weibo_id": 18
      },
      {
        "id": 37,
        "content": "分",
        "weibo_id": 18
      },
      {
        "id": 38,
        "content": "分阿凡达",
        "weibo_id": 18
      },
      {
        "id": 39,
        "content": "阿萨德发来看",
        "weibo_id": 18
      }
    ]
  }
])
18:48:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": [
      {
        "id": 35,
        "content": "阿世纪东方",
        "weibo_id": 18
      },
      {
        "id": 36,
        "content": "阿世纪东方范德萨",
        "weibo_id": 18
      },
      {
        "id": 37,
        "content": "分",
        "weibo_id": 18
      },
      {
        "id": 38,
        "content": "分阿凡达",
        "weibo_id": 18
      },
      {
        "id": 39,
        "content": "阿萨德发来看",
        "weibo_id": 18
      }
    ]
  }
]
18:48:47 完整请求
18:48:47 请求结束
18:48:47 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:48:47 path and query /static {'file': 'weibo.js'} 
18:48:47 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:48:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:50:54 完整请求
18:50:54 请求结束
18:50:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:50:54 path and query /weibo/index {} 
18:50:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:50:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #BFEFFF;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:50:54 完整请求
18:50:54 完整请求
18:50:54 请求结束
rm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:50:54 path and query /static {'file': 'gua.js'} 
-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:50:54 path and query /static {'file': 'weibo.js'} 
tatic at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:50:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:50:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:50:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:50:54 完整请求
18:50:54 请求结束
18:50:54 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:50:54 path and query /api/weibo/all {} 
18:50:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:50:54 debug weibo init form = ({}) content =() 
18:50:54 debug weibo init form = ({}) content =() 
18:50:54 debug weibo init form = ({}) content =() 
18:50:54 debug weibo init form = ({}) content =() 
18:50:54 debug weibo init form = ({}) content =() 
18:50:54 debug weibo init form = ({}) content =() 
18:50:54 debug weibo init form = ({}) content =() 
18:50:54 kwargs,  {'weibo_id': 1} <class 'dict'>
18:50:54 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:50:54 kwargs,  {'weibo_id': 1} <class 'dict'>
18:50:54 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:50:54 kwargs,  {'weibo_id': 2} <class 'dict'>
18:50:54 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:50:54 kwargs,  {'weibo_id': 2} <class 'dict'>
18:50:54 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:50:54 kwargs,  {'weibo_id': 8} <class 'dict'>
18:50:54 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
, < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>
, < Comment
id: (33)
content: (安抚)
weibo_id: (8) 
>
, < Comment
id: (34)
content: (涉及到付款)
weibo_id: (8) 
>
])
18:50:54 kwargs,  {'weibo_id': 8} <class 'dict'>
18:50:54 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]) type=(<class 'list'>) 
18:50:54 kwargs,  {'weibo_id': 9} <class 'dict'>
18:50:54 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:50:54 kwargs,  {'weibo_id': 9} <class 'dict'>
18:50:54 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:50:54 kwargs,  {'weibo_id': 11} <class 'dict'>
18:50:54 debug Weibo comment([])
18:50:54 kwargs,  {'weibo_id': 11} <class 'dict'>
18:50:54 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:50:54 kwargs,  {'weibo_id': 17} <class 'dict'>
18:50:54 debug Weibo comment([])
18:50:54 kwargs,  {'weibo_id': 17} <class 'dict'>
18:50:54 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:50:54 kwargs,  {'weibo_id': 18} <class 'dict'>
18:50:54 debug Weibo comment([< Comment
id: (35)
content: (阿世纪东方)
weibo_id: (18) 
>
, < Comment
id: (36)
content: (阿世纪东方范德萨)
weibo_id: (18) 
>
, < Comment
id: (37)
content: (分)
weibo_id: (18) 
>
, < Comment
id: (38)
content: (分阿凡达)
weibo_id: (18) 
>
, < Comment
id: (39)
content: (阿萨德发来看)
weibo_id: (18) 
>
])
18:50:54 kwargs,  {'weibo_id': 18} <class 'dict'>
18:50:54 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': [{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}, {'id': 39, 'content': '阿萨德发来看', 'weibo_id': 18}]})comments([{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}, {'id': 39, 'content': '阿萨德发来看', 'weibo_id': 18}]) type=(<class 'list'>) 
18:50:54 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": [
      {
        "id": 35,
        "content": "阿世纪东方",
        "weibo_id": 18
      },
      {
        "id": 36,
        "content": "阿世纪东方范德萨",
        "weibo_id": 18
      },
      {
        "id": 37,
        "content": "分",
        "weibo_id": 18
      },
      {
        "id": 38,
        "content": "分阿凡达",
        "weibo_id": 18
      },
      {
        "id": 39,
        "content": "阿萨德发来看",
        "weibo_id": 18
      }
    ]
  }
])
18:50:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  },
  {
    "id": 9,
    "title": "谁知道啊",
    "content": "没有什么废话啊",
    "ut": 1532655546,
    "comments": [
      {
        "id": 15,
        "content": "闪电发货水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 16,
        "content": "按时水电费水电费",
        "weibo_id": 9
      },
      {
        "id": 17,
        "content": "手速啊",
        "weibo_id": 9
      },
      {
        "id": 18,
        "content": "收到货房间爱上",
        "weibo_id": 9
      },
      {
        "id": 24,
        "content": "阿萨德复活节",
        "weibo_id": 9
      },
      {
        "id": 30,
        "content": "阿萨德",
        "weibo_id": 9
      }
    ]
  },
  {
    "id": 11,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 17,
    "title": "",
    "content": "",
    "comments": []
  },
  {
    "id": 18,
    "title": "sadas",
    "content": "sadas",
    "comments": [
      {
        "id": 35,
        "content": "阿世纪东方",
        "weibo_id": 18
      },
      {
        "id": 36,
        "content": "阿世纪东方范德萨",
        "weibo_id": 18
      },
      {
        "id": 37,
        "content": "分",
        "weibo_id": 18
      },
      {
        "id": 38,
        "content": "分阿凡达",
        "weibo_id": 18
      },
      {
        "id": 39,
        "content": "阿萨德发来看",
        "weibo_id": 18
      }
    ]
  }
]
18:51:07 完整请求
18:51:07 完整请求
18:51:07 请求结束
18:51:07 请求结束
18:51:20 完整请求
18:51:20 请求结束
18:51:20 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:51:20 path and query /api/comment/add {} {"weibo_id":"18","content":"四大复活节卡发顺丰角度看"}
18:51:20 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:51:20 路由到了添加评论(<__main__.Request object at 0x03E97D10>)
18:51:20 接收到的前端的数据 {'weibo_id': '18', 'content': '四大复活节卡发顺丰角度看'}
18:51:20 创建的评论对象 < Comment
id: (40)
content: (四大复活节卡发顺丰角度看)
weibo_id: (18) 
>

18:51:20 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 40,
  "content": "四大复活节卡发顺丰角度看",
  "weibo_id": 18
})
18:51:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 40,
  "content": "四大复活节卡发顺丰角度看",
  "weibo_id": 18
}
18:51:26 完整请求
18:51:26 请求结束
18:51:26 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:51:26 path and query /api/weibo/delete {'id': '17'} 
18:51:26 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:51:26 debug weibo init form = ({}) content =() 
18:51:26 debug weibo init form = ({}) content =() 
18:51:26 debug weibo init form = ({}) content =() 
18:51:26 debug weibo init form = ({}) content =() 
18:51:26 debug weibo init form = ({}) content =() 
18:51:26 debug weibo init form = ({}) content =() 
18:51:26 debug weibo init form = ({}) content =() 
18:51:26 kwargs,  {'weibo_id': 17} <class 'dict'>
18:51:26 debug Weibo comment([])
18:51:26 kwargs,  {'weibo_id': 17} <class 'dict'>
18:51:26 debug weibo json({'id': 17, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:51:26 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "title": "",
  "content": "",
  "comments": []
})
18:51:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "title": "",
  "content": "",
  "comments": []
}
18:51:27 完整请求
18:51:27 请求结束
18:51:27 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:51:27 path and query /api/weibo/delete {'id': '11'} 
18:51:27 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:51:27 debug weibo init form = ({}) content =() 
18:51:27 debug weibo init form = ({}) content =() 
18:51:27 debug weibo init form = ({}) content =() 
18:51:27 debug weibo init form = ({}) content =() 
18:51:27 debug weibo init form = ({}) content =() 
18:51:27 debug weibo init form = ({}) content =() 
18:51:27 kwargs,  {'weibo_id': 11} <class 'dict'>
18:51:27 debug Weibo comment([])
18:51:27 kwargs,  {'weibo_id': 11} <class 'dict'>
18:51:27 debug weibo json({'id': 11, 'title': '', 'content': '', 'comments': []})comments([]) type=(<class 'list'>) 
18:51:27 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "title": "",
  "content": "",
  "comments": []
})
18:51:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "title": "",
  "content": "",
  "comments": []
}
18:51:34 完整请求
18:51:34 请求结束
18:51:34 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:51:34 path and query /api/weibo/delete {'id': '18'} 
18:51:34 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:51:34 debug weibo init form = ({}) content =() 
18:51:34 debug weibo init form = ({}) content =() 
18:51:34 debug weibo init form = ({}) content =() 
18:51:34 debug weibo init form = ({}) content =() 
18:51:34 debug weibo init form = ({}) content =() 
18:51:34 kwargs,  {'weibo_id': 18} <class 'dict'>
18:51:34 debug Weibo comment([< Comment
id: (35)
content: (阿世纪东方)
weibo_id: (18) 
>
, < Comment
id: (36)
content: (阿世纪东方范德萨)
weibo_id: (18) 
>
, < Comment
id: (37)
content: (分)
weibo_id: (18) 
>
, < Comment
id: (38)
content: (分阿凡达)
weibo_id: (18) 
>
, < Comment
id: (39)
content: (阿萨德发来看)
weibo_id: (18) 
>
, < Comment
id: (40)
content: (四大复活节卡发顺丰角度看)
weibo_id: (18) 
>
])
18:51:34 kwargs,  {'weibo_id': 18} <class 'dict'>
18:51:34 debug weibo json({'id': 18, 'title': 'sadas', 'content': 'sadas', 'comments': [{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}, {'id': 39, 'content': '阿萨德发来看', 'weibo_id': 18}, {'id': 40, 'content': '四大复活节卡发顺丰角度看', 'weibo_id': 18}]})comments([{'id': 35, 'content': '阿世纪东方', 'weibo_id': 18}, {'id': 36, 'content': '阿世纪东方范德萨', 'weibo_id': 18}, {'id': 37, 'content': '分', 'weibo_id': 18}, {'id': 38, 'content': '分阿凡达', 'weibo_id': 18}, {'id': 39, 'content': '阿萨德发来看', 'weibo_id': 18}, {'id': 40, 'content': '四大复活节卡发顺丰角度看', 'weibo_id': 18}]) type=(<class 'list'>) 
18:51:34 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "title": "sadas",
  "content": "sadas",
  "comments": [
    {
      "id": 35,
      "content": "阿世纪东方",
      "weibo_id": 18
    },
    {
      "id": 36,
      "content": "阿世纪东方范德萨",
      "weibo_id": 18
    },
    {
      "id": 37,
      "content": "分",
      "weibo_id": 18
    },
    {
      "id": 38,
      "content": "分阿凡达",
      "weibo_id": 18
    },
    {
      "id": 39,
      "content": "阿萨德发来看",
      "weibo_id": 18
    },
    {
      "id": 40,
      "content": "四大复活节卡发顺丰角度看",
      "weibo_id": 18
    }
  ]
})
18:51:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "title": "sadas",
  "content": "sadas",
  "comments": [
    {
      "id": 35,
      "content": "阿世纪东方",
      "weibo_id": 18
    },
    {
      "id": 36,
      "content": "阿世纪东方范德萨",
      "weibo_id": 18
    },
    {
      "id": 37,
      "content": "分",
      "weibo_id": 18
    },
    {
      "id": 38,
      "content": "分阿凡达",
      "weibo_id": 18
    },
    {
      "id": 39,
      "content": "阿萨德发来看",
      "weibo_id": 18
    },
    {
      "id": 40,
      "content": "四大复活节卡发顺丰角度看",
      "weibo_id": 18
    }
  ]
}
18:51:40 完整请求
18:51:40 请求结束
18:51:40 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
18:51:40 path and query /api/weibo/delete {'id': '9'} 
18:51:40 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:51:40 debug weibo init form = ({}) content =() 
18:51:40 debug weibo init form = ({}) content =() 
18:51:40 debug weibo init form = ({}) content =() 
18:51:40 debug weibo init form = ({}) content =() 
18:51:40 kwargs,  {'weibo_id': 9} <class 'dict'>
18:51:40 debug Weibo comment([< Comment
id: (15)
content: (闪电发货水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (16)
content: (按时水电费水电费)
weibo_id: (9) 
>
, < Comment
id: (17)
content: (手速啊)
weibo_id: (9) 
>
, < Comment
id: (18)
content: (收到货房间爱上)
weibo_id: (9) 
>
, < Comment
id: (24)
content: (阿萨德复活节)
weibo_id: (9) 
>
, < Comment
id: (30)
content: (阿萨德)
weibo_id: (9) 
>
])
18:51:40 kwargs,  {'weibo_id': 9} <class 'dict'>
18:51:40 debug weibo json({'id': 9, 'title': '谁知道啊', 'content': '没有什么废话啊', 'ut': 1532655546, 'comments': [{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]})comments([{'id': 15, 'content': '闪电发货水电费水电费', 'weibo_id': 9}, {'id': 16, 'content': '按时水电费水电费', 'weibo_id': 9}, {'id': 17, 'content': '手速啊', 'weibo_id': 9}, {'id': 18, 'content': '收到货房间爱上', 'weibo_id': 9}, {'id': 24, 'content': '阿萨德复活节', 'weibo_id': 9}, {'id': 30, 'content': '阿萨德', 'weibo_id': 9}]) type=(<class 'list'>) 
18:51:40 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "谁知道啊",
  "content": "没有什么废话啊",
  "ut": 1532655546,
  "comments": [
    {
      "id": 15,
      "content": "闪电发货水电费水电费",
      "weibo_id": 9
    },
    {
      "id": 16,
      "content": "按时水电费水电费",
      "weibo_id": 9
    },
    {
      "id": 17,
      "content": "手速啊",
      "weibo_id": 9
    },
    {
      "id": 18,
      "content": "收到货房间爱上",
      "weibo_id": 9
    },
    {
      "id": 24,
      "content": "阿萨德复活节",
      "weibo_id": 9
    },
    {
      "id": 30,
      "content": "阿萨德",
      "weibo_id": 9
    }
  ]
})
18:51:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "谁知道啊",
  "content": "没有什么废话啊",
  "ut": 1532655546,
  "comments": [
    {
      "id": 15,
      "content": "闪电发货水电费水电费",
      "weibo_id": 9
    },
    {
      "id": 16,
      "content": "按时水电费水电费",
      "weibo_id": 9
    },
    {
      "id": 17,
      "content": "手速啊",
      "weibo_id": 9
    },
    {
      "id": 18,
      "content": "收到货房间爱上",
      "weibo_id": 9
    },
    {
      "id": 24,
      "content": "阿萨德复活节",
      "weibo_id": 9
    },
    {
      "id": 30,
      "content": "阿萨德",
      "weibo_id": 9
    }
  ]
}
18:54:16 完整请求
18:54:16 请求结束
18:54:54 完整请求
18:54:54 请求结束
18:54:54 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:54:54 path and query /weibo/index {} 
18:54:54 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:54:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #BFEFFF;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:54:55 完整请求
18:54:55 请求结束
18:54:55 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:54:55 path and query /static {'file': 'gua.js'} 
18:54:55 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:54:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

18:54:55 完整请求
18:54:55 请求结束
18:54:55 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:54:55 path and query /static {'file': 'weibo.js'} 
18:54:55 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:54:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
                <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        <button class='comment-delete'>删除</button>
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:54:55 完整请求
18:54:55 请求结束
18:54:55 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:54:55 path and query /api/weibo/all {} 
18:54:55 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:54:55 debug weibo init form = ({}) content =() 
18:54:55 debug weibo init form = ({}) content =() 
18:54:55 debug weibo init form = ({}) content =() 
18:54:55 kwargs,  {'weibo_id': 1} <class 'dict'>
18:54:55 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
18:54:55 kwargs,  {'weibo_id': 1} <class 'dict'>
18:54:55 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
18:54:55 kwargs,  {'weibo_id': 2} <class 'dict'>
18:54:55 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
])
18:54:55 kwargs,  {'weibo_id': 2} <class 'dict'>
18:54:55 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}]) type=(<class 'list'>) 
18:54:55 kwargs,  {'weibo_id': 8} <class 'dict'>
18:54:55 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
, < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>
, < Comment
id: (33)
content: (安抚)
weibo_id: (8) 
>
, < Comment
id: (34)
content: (涉及到付款)
weibo_id: (8) 
>
])
18:54:55 kwargs,  {'weibo_id': 8} <class 'dict'>
18:54:55 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]) type=(<class 'list'>) 
18:54:55 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  }
])
18:54:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  }
]
18:54:55 完整请求
18:54:55 请求结束
18:54:55 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:54:55 path and query /static {'file': 'weibo.js'} 
18:54:55 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:54:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
                <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        <button class='comment-delete'>删除</button>
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:55:06 完整请求
18:55:06 请求结束
18:55:06 cookie ['Pycharm-df2c00ac=e1883c52-8117-4744-abff-7e7de36d045e']
18:55:06 path and query /api/comment/add {} {"weibo_id":"2","content":"是打飞机进口量将"}
18:55:06 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
18:55:06 路由到了添加评论(<__main__.Request object at 0x03E97F50>)
18:55:06 接收到的前端的数据 {'weibo_id': '2', 'content': '是打飞机进口量将'}
18:55:06 创建的评论对象 < Comment
id: (41)
content: (是打飞机进口量将)
weibo_id: (2) 
>

18:55:06 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 41,
  "content": "是打飞机进口量将",
  "weibo_id": 2
})
18:55:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 41,
  "content": "是打飞机进口量将",
  "weibo_id": 2
}
19:16:27 完整请求
19:16:27 请求结束
19:16:27 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
19:16:27 path and query /weibo/index {} 
19:16:27 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
19:16:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #BFEFFF;
        }
    </style>

</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:16:27 完整请求
19:16:27 请求结束
19:16:27 完整请求
19:16:27 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
19:16:27 请求结束
19:16:27 path and query /static {'file': 'gua.js'} 
19:16:27 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
19:16:27 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
19:16:27 path and query /static {'file': 'weibo.js'} 
19:16:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}


/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    log('form', form)
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('comment 前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo add
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('前端发送到数据from =', form)
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log('前端发送的数据', form)
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

19:16:27 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
19:16:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var commentsTemplate = function(comments) {
    var html = ''
    // log('comments = ', comments)
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var content = c.content
        var weibo_id = c.weibo_id
        var t = `
            <div class="comment-cell" id='comment-${id}' data-comid=${id}>
                ${content}
                <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    // log('html = ', html)
    return html
}


var insertComment = function(comment){
    //comments是对象
    var c = comment
    var id = c.id
    var content = c.content
    var weibo_id = c.weibo_id
    // log('debug insertComment\n', id, content, weibo_id)
    var t = `
        <div class="comment-cell" id='comment-${id}' data-comid=${id} data-weibo_id = weibo_id>
            ${content}
        <button class='comment-delete'>删除</button>
        </div>
    `
    // 生成的commentForm添加到当前的weibocell中
    return t

}

var delete_element = function () {
    //传入元素的id
    //删除元素

}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var titile = Weibo.title
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    // 为什么我获取不到data的值
    // <span class='weibo-content'>[WEIBO]${content}</span>
    // log('comments=', comments, typeof(comments))
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
                <span class='weibo-title'>[title]${titile}</span>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">edit</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class="comment-input">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var content = input.value
        var form = {
            'title': title,
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了delete', self, self.parentElement)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            // log('删除的dataset id=', self.parentElement, '删除自己', self)
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('点击了bindEventWeiboEdit deit', self.parentElement)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}

var updateInnerHtml = function(){
    //更新微博
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell=', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function () {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    // log('debug bindEventCommitAdd- -', b)
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var commentForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = commentForm.querySelector('.comment-input')
            log('点击了 comment-input ', input)
            // var title = input.value
            // var input = e('.comment-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            log('点击了评论添加click add', commentForm.parentElement)
            var form = {
                'weibo_id': Weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('更新成功', Weibo_id, Comment)

                // 选择
                var selector = '#weibo-' + Comment.weibo_id
                // 获取要修改comment的weibo的id
                // 根据id找到weibocell
                // 在weibocell中 找到commlist
                // 替换commentlist的内容
                // var comment = commentsTemplate(Comment)
                var addedComment = insertComment(Comment)
                var weiboCell = e(selector)
                // log('commentList=', commentList, '|', Comment)
                var titleSpan = weiboCell.querySelector('.comment-list')
                // log('titleSpan=', titleSpan)
                // 将返回的数据添加到commentlist的最后面

                titleSpan.insertAdjacentHTML('beforeend', addedComment)
                // var selector = '#weibo-' + Weibo.id
                // var WeiboCell = e(selector)
                // log('WeiboCell=', WeiboCell)
                // var titleSpan = WeiboCell.querySelector('.weibo-title')
                // titleSpan.innerHTML = '[WEIBO]'  + Weibo.title
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}
var ces={
    content: "四大复活节",
    id: 28,
    weibo_id: 8
};
var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:16:27 完整请求
19:16:27 请求结束
19:16:27 cookie ['Pycharm-df2c00ac=2c9c504c-98e7-4d59-94a6-d21c0eb4da36', 'user=9sdw9ag8lrked9k8', 'username-localhost-8889="2|1:0|10:1532351487|23:username-localhost-8889|44:OGY4N2QyMTVhMzM3NGQwYWIxMzVjNDBmZDI1MjgxNDk=|7bd82ad0e8820ec18d3bb088326c13bd90f42fb9a0e96089d0dff57f3a391b55"', 'username-localhost-8888="2|1:0|10:1532351957|23:username-localhost-8888|44:ZmMzOGJjYzRiYjM1NDU3ZWExYmI3YWEzMDk4MDY5ZmY=|5d94647c90c53f2919d6b1ad0b60fae7b9d38485b4492dc997ad3220e99d9601"']
19:16:27 path and query /api/weibo/all {} 
19:16:27 deug response***({'/static': <function route_static at 0x03E96978>, '/api/todo/all': <function all at 0x03E96F60>, '/api/todo/add': <function add at 0x03E9E030>, '/api/todo/delete': <function delete at 0x03E9E150>, '/api/todo/update': <function update at 0x03E9E198>, '/api/weibo/all': <function all_weibo at 0x03E9E390>, '/api/weibo/add': <function add_weibo at 0x03E9E348>, '/api/weibo/delete': <function delete_weibo at 0x03E9E300>, '/api/weibo/update': <function update_weibo at 0x03E9E2B8>, '/api/comment/add': <function add_comment at 0x03E9E270>, '/login': <function route_login at 0x03E96B28>, '/register': <function route_register at 0x03E96B70>, '/': <function main_index at 0x03E96D68>, '/todo/index': <function index at 0x03E96F18>, '/weibo/index': <function index at 0x03E96C48>})
19:16:27 debug weibo init form = ({}) content =() 
19:16:27 debug weibo init form = ({}) content =() 
19:16:27 debug weibo init form = ({}) content =() 
19:16:27 kwargs,  {'weibo_id': 1} <class 'dict'>
19:16:27 debug Weibo comment([< Comment
id: (1)
content: (楼主说得对)
weibo_id: (1)
user_id: (2) 
>
, < Comment
id: (2)
content: (lbvu is right)
weibo_id: (1)
user_id: (1) 
>
])
19:16:27 kwargs,  {'weibo_id': 1} <class 'dict'>
19:16:27 debug weibo json({'id': 1, 'title': '', 'content': 'hello tweet', 'user_id': 1, 'comments': [{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]})comments([{'id': 1, 'content': '楼主说得对', 'weibo_id': 1, 'user_id': 2}, {'id': 2, 'content': 'lbvu is right', 'weibo_id': 1, 'user_id': 1}]) type=(<class 'list'>) 
19:16:27 kwargs,  {'weibo_id': 2} <class 'dict'>
19:16:27 debug Weibo comment([< Comment
id: (3)
content: (hello)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (4)
content: (123)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (5)
content: (asdf)
weibo_id: (2)
user_id: (1) 
>
, < Comment
id: (7)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (8)
content: (说得好)
weibo_id: (2)
user_id: (2) 
>
, < Comment
id: (10)
content: (维护单)
weibo_id: (2) 
>
, < Comment
id: (41)
content: (是打飞机进口量将)
weibo_id: (2) 
>
])
19:16:27 kwargs,  {'weibo_id': 2} <class 'dict'>
19:16:27 debug weibo json({'id': 2, 'title': '', 'content': '你好', 'user_id': 1, 'comments': [{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}, {'id': 41, 'content': '是打飞机进口量将', 'weibo_id': 2}]})comments([{'id': 3, 'content': 'hello', 'weibo_id': 2, 'user_id': 1}, {'id': 4, 'content': '123', 'weibo_id': 2, 'user_id': 1}, {'id': 5, 'content': 'asdf', 'weibo_id': 2, 'user_id': 1}, {'id': 7, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 8, 'content': '说得好', 'weibo_id': 2, 'user_id': 2}, {'id': 10, 'content': '维护单', 'weibo_id': 2}, {'id': 41, 'content': '是打飞机进口量将', 'weibo_id': 2}]) type=(<class 'list'>) 
19:16:27 kwargs,  {'weibo_id': 8} <class 'dict'>
19:16:27 debug Weibo comment([< Comment
id: (13)
content: (红褐色)
weibo_id: (8) 
>
, < Comment
id: (25)
content: (按时发货后健身房)
weibo_id: (8) 
>
, < Comment
id: (26)
content: (山东黄金卡视角卡迪夫)
weibo_id: (8) 
>
, < Comment
id: (27)
content: (爱喝酒撒多喝水复健科)
weibo_id: (8) 
>
, < Comment
id: (28)
content: (四大复活节)
weibo_id: (8) 
>
, < Comment
id: (29)
content: (阿达的痕迹)
weibo_id: (8) 
>
, < Comment
id: (31)
content: (大厦数据库)
weibo_id: (8) 
>
, < Comment
id: (32)
content: (水电费和进口量)
weibo_id: (8) 
>
, < Comment
id: (33)
content: (安抚)
weibo_id: (8) 
>
, < Comment
id: (34)
content: (涉及到付款)
weibo_id: (8) 
>
])
19:16:27 kwargs,  {'weibo_id': 8} <class 'dict'>
19:16:27 debug weibo json({'id': 8, 'title': '我就是 爱音乐', 'content': '我就是 爱音乐', 'comments': [{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]})comments([{'id': 13, 'content': '红褐色', 'weibo_id': 8}, {'id': 25, 'content': '按时发货后健身房', 'weibo_id': 8}, {'id': 26, 'content': '山东黄金卡视角卡迪夫', 'weibo_id': 8}, {'id': 27, 'content': '爱喝酒撒多喝水复健科', 'weibo_id': 8}, {'id': 28, 'content': '四大复活节', 'weibo_id': 8}, {'id': 29, 'content': '阿达的痕迹', 'weibo_id': 8}, {'id': 31, 'content': '大厦数据库', 'weibo_id': 8}, {'id': 32, 'content': '水电费和进口量', 'weibo_id': 8}, {'id': 33, 'content': '安抚', 'weibo_id': 8}, {'id': 34, 'content': '涉及到付款', 'weibo_id': 8}]) type=(<class 'list'>) 
19:16:27 后端返回的数据(HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      },
      {
        "id": 41,
        "content": "是打飞机进口量将",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  }
])
19:16:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "",
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "title": "",
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 10,
        "content": "维护单",
        "weibo_id": 2
      },
      {
        "id": 41,
        "content": "是打飞机进口量将",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 8,
    "title": "我就是 爱音乐",
    "content": "我就是 爱音乐",
    "comments": [
      {
        "id": 13,
        "content": "红褐色",
        "weibo_id": 8
      },
      {
        "id": 25,
        "content": "按时发货后健身房",
        "weibo_id": 8
      },
      {
        "id": 26,
        "content": "山东黄金卡视角卡迪夫",
        "weibo_id": 8
      },
      {
        "id": 27,
        "content": "爱喝酒撒多喝水复健科",
        "weibo_id": 8
      },
      {
        "id": 28,
        "content": "四大复活节",
        "weibo_id": 8
      },
      {
        "id": 29,
        "content": "阿达的痕迹",
        "weibo_id": 8
      },
      {
        "id": 31,
        "content": "大厦数据库",
        "weibo_id": 8
      },
      {
        "id": 32,
        "content": "水电费和进口量",
        "weibo_id": 8
      },
      {
        "id": 33,
        "content": "安抚",
        "weibo_id": 8
      },
      {
        "id": 34,
        "content": "涉及到付款",
        "weibo_id": 8
      }
    ]
  }
]
19:16:38 完整请求
19:16:38 完整请求
19:16:38 请求结束
19:16:38 请求结束
